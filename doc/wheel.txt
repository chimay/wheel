*wheel.txt*		File Group Manager for Vim and Neovim

==============================================================================
CONTENTS			*wheel*

Introduction			|wheel-introduction|
Step by step			|wheel-step-by-step|
Prompting functions		|wheel-prompting-functions|
Dedicated buffers		|wheel-dedicated-buffers|
Batch mode			|wheel-batch-operations|
Configuration			|wheel-configuration|
Autocommands			|wheel-autocommands|
Functions			|wheel-functions|
Mappings			|wheel-mappings|
Commands			|wheel-commands|
Examples			|wheel-examples|
Files				|wheel-files|

==============================================================================
INTRODUCTION						*wheel-introduction*

What is it ?			|wheel-introduction-what|
File groups			|wheel-introduction-file-groups|
Features			|wheel-introduction-features|
History				|wheel-introduction-history|

------------------------------------------------------------------------------
WHAT IS IT					*wheel-introduction-what*

Wheel is a navigation plugin for Vim or Neovim. It makes abundant use
of dedicated buffers, in which you can filter and select elements.

------------------------------------------------------------------------------
FILE GROUPS				*wheel-introduction-file-groups*

Wheel let you organize your files by creating as many file groups as
you need, add the files you want to it and quickly navigate between :

- files of the same group
- file groups

Note that :

- a location contains a name, a filename, as well as a line & column number
- a file group, in fact a location group, is called a circle
- a set of file groups is called a torus (a circle of circles)
- the list of toruses is called the wheel

Why do you need three levels of grouping ?~

At first glance, managing groups with circles in a torus seems to
be sufficient. But with time, the torus grows big, and a third level
helps you to organize your files by groups and categories:

  - the wheel contains all the toruses
  - each torus contains a category of files, e.g.:
    + configuration, development, publication
  - each circle contains a project, e.g.:
    + emacs or vifm circles in configuration torus
    + shell or elisp in development torus
    + tea or art in publication torus

A wheel that follows you~
    ~
Wheel is designed to follow your workflow : you only add the files
you want, where you want. For instance, if you have a `organize` group
with agenda & todo files, you can quickly alternate them, or display
them in two windows. Then, if you suddenly got an idea to tune vim,
you switch to the `vim` group with your favorites configuration files in
it. Same process, to cycle, alternate or display the files. Over time,
your groups will grow and adapt to your style.

------------------------------------------------------------------------------
FEATURES				*wheel-introduction-features*

- add
  + files from anywhere in the filesystem
  + a file in more than one group
  + file:line-1 and file:line-2 in the same group
- may be saved in wheel file (recommended)
- on demand loading of files
  + no slowdown of (neo)vim start
- easy navigation
  + switch to matching tab & window if available
  + next / Previous location, circle or torus
  + choose file, group or category in dedicated buffer
    * filter candidates
    * folds matching wheel tree structure
    * context menus
  + auto |:lcd| to project root of current file
- search files
  + using locate
  + using find
  + MRU files not found in wheel
  + opened buffers
  + visible buffers in tabs & windows
- search inside files
  + grep on group files
    * navigate
    * edit buffer and propagate changes with |:cdo|
  + outline
    * folds headers in group files (based on fold markers)
    * markdown headers
    * org mode headers
  + tags
  + jumps & changes lists
- yank wheel using TextYankPost event
  + paste before or after, linewise or characterwise
- reorganizing
  + wheel elements
  + tabs & windows
  + grep in edit mode
- undo list
  + diff between last & chosen state
- command output in buffer
  + :ex or !shell command
  + async shell command
- dedicated buffers stack to save your searches
  + layer stack in each dedicated buffer
- display files
  + split levels : torus, circle, location
  + split
    * vertical, golden vertical
    * horizontal, golden horizontal
    * main left, golden left
    * main top, golden top
    * grid
  + mix of above
    * circles on tabs, locations on split
    * toruses on tabs, circles on split
- batch operations
- autogroup files by extension or directory

------------------------------------------------------------------------------
HISTORY						*wheel-introduction-history*

This project is inspired by :

- ctrlspace : https://github.com/vim-ctrlspace/vim-ctrlspace, a similar
  plugin for Vim

- unite : https://github.com/Shougo/unite.vim and its successor denite
  (Shougo/denite.nvim), a search plugin for arbitrary sources

- torus : https://github.com/chimay/torus, a similar plugin for Emacs,
  itself inspired by MTorus

- quickfix-reflector : https://github.com/stefandtw/quickfix-reflector.vim,
  for the grep edit mode

==============================================================================
STEP BY STEP						*wheel-step-by-step*

Prefix				|wheel-sbs-prefix|
One map to ring them all	|wheel-sbs-one-map-to-ring-them-all|
First circles			|wheel-sbs-first-circles|
Moving around			|wheel-sbs-moving-around|
Square the circle		|wheel-sbs-square-the-circle|

------------------------------------------------------------------------------
PREFIX						*wheel-sbs-prefix*

In the following discussion, I assume that you have kept the default
mapping prefix : >

 let g:wheel_config.prefix = '<M-w>'
<

------------------------------------------------------------------------------
ONE MAP TO RING THEM ALL		*wheel-sbs-one-map-to-ring-them-all*

To get an overview of the Wheel, I suggest you take a look at the main
menu. Press `<M-w>m` and a new buffer will appear, listing the actions
you can perform. Insert mode is used to filter the lines. Press enter
in normal mode to trigger an action (if you know what you’re doing),
or `q` to quit the menu.

If you prefer the meta menu leading you to thematic sub-menus, you can
launch it with `<M-w>=`.

To learn more about menus, see |wheel-dedicated-buffers-menus|.

------------------------------------------------------------------------------
FIRST CIRCLES				    	    *wheel-sbs-first-circles*

Let’s say we have the files `Juice`, `Tea`, `Coffee` and we want to
group them. So, we go to `Juice` and type `<M-w>a` to add a location to
the wheel. If no category (no torus) is present in the wheel, it will
create it and ask for a name. Let’s say we name it `Food`. If no group
(no circle) is found in the torus, it will be created and prompt for a
name. Let’s say we choose `Drinks`. Finally, we are asked to choose a
name for our location. A completion is available : if we press `<Tab>`,
we can choose between different flavours of the current filename :

- without extension
- with extension
- relative path
- absolute path

In this case, we simply choose `Juice`, and our location is added to
the group.

Then, we go to `Tea` and type `<M-w>a` again. This time, it will just
ask us if we want to keep the default location name. Press enter, and
`Tea` is added to the `Drinks` group.

Same process with `Coffee`. We now have a circle `Drink` containing
three files.

Now, suppose that in the `Juice` file, you have a Pineapple
and a Mango sections, and you want to compare them. Just go to
the Pineapple section, and use `<M-w>a`. It will add the location
`Juice:pineapple-line:pineapple-col` to the current circle. Then, go to
the Mango section, and do the same. The `Juice:mango-line:mango-col`
will also be added to the circle. You can then easily alternate both,
or display them in split windows.

If you want to create another group (circle), let’s say `Fruits`,
simply launch `<M-w><C-a>`, and answer `Fruits` to the prompt. You can
then add the files `Apple`, `Pear` and `Orange` to it. You can even also
add `Juice`: a file can be added to more than one circle.

If you want to create another category (torus), let’s say `Books`,
simply launch `<M-w><S-a>`, and answer `Books` to the prompt.

What happens if you have a lot of files ? Let's say the `novels`
folder, located in the current directory, contains dozen of novels
in plain text format. You can add all of them at once with the
`add_glob` function. Press `<M-w>*` and wheel will ask you to enter a
glob pattern. You can answer `novels/*` to add all files in there. If
there are more levels of subdirs and you want to include all of them,
you can enter `novels/**/*` instead. Then, it will ask if you want to
add the files in a new circle. You can answer yes and call this circle
`Novels`. And voilà, your new `Novels` group contain all the files in
the `novels` folder.

------------------------------------------------------------------------------
MOVING AROUND					     *wheel-sbs-moving-around*

Cycling~

You can cycle the files of a circle with `<M-w><Left>` and
`<M-w><Right>`. These are often used bindings, so I suggest you map them
to more convenient keys, like `<C-PageUp>` and `<C-PageDown>`. See
|wheel-mappings-level-10|.

To cycle the circles, use `<M-w><C-Left>` and `<M-w><C-Right>`. You can
also map them to more convenient keys, like `<C-Home>` and `<C-End>`.

To cycle the toruses, use `<M-w><S-Left>` and `<M-w><S-Right>` or
map them to `<S-Home>` and `<S-End>`.

Switch~

You can switch :

- location with `<M-w><Enter>`
- circle with `<M-w><C-Enter>`
- torus with `<M-w><S-Enter>`

A completion is available, see |wheel-prompting-functions-completion|.

Switch using a dedicated buffer~

You can also switch location, circle or torus by chosing it in a wheel
navigation buffer. See |wheel-dedicated-buffers-navigation|.

------------------------------------------------------------------------------
SQUARE THE CIRCLE				*wheel-sbs-square-the-circle*

Over time, the number of circles will grow. Completion is great,
but if you just want to alternate the two last locations in history,
you’ll probably prefer `<M-w>^`. A  menu will appear and offer you
these alternate variants :

- alternate anywhere
- alternate in the same circle
- alternate in the same torus
- alternate in another circle
- alternate in another torus
- alternate in same torus but another circle

You can also use the meta or main menu.

I strongly suggest you map a convenient key, like `<C-^>`, to
`<plug>(wheel-alternate-anywhere)`, it’s one of the most often binding
you will use. See |wheel-mappings-level-10| for more informations.

A common case is to alternate two files in the same circle, and two
circles in the same torus. So, you have the square :

 Alternate    | File 1	        | File 2
--------------|-----------------|-----------------
Circle Drinks | Juice           | Tea
Circle Fruits | Apple           | Pear

at your fingertips.

==============================================================================
PROMPTING FUNCTIONS				*wheel-prompting-functions*

Completion			    |wheel-prompting-functions-completion|

------------------------------------------------------------------------------
COMPLETION			    *wheel-prompting-functions-completion*

When a wheel function needs to prompt the user for input, it offers completion
wherever possible, depending on the nature of the asked entry.

Hitting |'wildchar'| (most likely `<tab>`), will trigger the completion.

Add a circle to the current torus~

When you add a circle, you are prompted for a name. The completion is
based on the current file directory. Different flavours are available :

- simple : just the directory of the current file
- relative path
- absolute path

You can of course adapt the completed name before confirming with
`<enter>`. In fact, the name you choose can be anything you want, as
long as it is not already in the current torus.

Add a location to the current circle~

When you add a location, you are prompted for a name. The completion is
based on the current file name. Different flavours are available :

- file name without extension
- file name with extension
- file name with relative path
- file name with absolute path

You can of course adapt the completed name before confirming with
`<enter>`. In fact, the name you choose can be anything you want, as
long as it is not already in the current circle.

Rename~

The completion is the same as for adding a circle or a location.

Switch element in the wheel~

| Function        | Completion list              |
| --------------- | ---------------------------- |
| switch location | locations of current circle  |
| switch circle   | circles of the current torus |
| switch torus    | toruses in the wheel         |

Switch layer stack~

See |wheel-dedicated-buffers-layers|.

You can complete by layer types, wich will lead you to the layer you want.

Switch dedicated buffer~

See |wheel-dedicated-buffers-stack|.

You can complete by dedicated buffer pseudo-filename, wich will lead
you to the buffer you want.

==============================================================================
DEDICATED BUFFERS				    *wheel-dedicated-buffers*

Introduction			|wheel-dedicated-buffers-introduction|
Layer stack			|wheel-dedicated-buffers-layers|
Buffer stack			|wheel-dedicated-buffers-stack|
Menu				|wheel-dedicated-buffers-menus|
Context menus			|wheel-dedicated-buffers-context|
Navigation			|wheel-dedicated-buffers-navigation|
Grep buffer			|wheel-dedicated-buffers-grep|
Find buffer			|wheel-dedicated-buffers-find|
Yank buffer			|wheel-dedicated-buffers-yank|
Reordering		        |wheel-dedicated-buffers-reordering|
Reorganizing			|wheel-dedicated-buffers-reorganizing|
Reorganizing tabs & windows	|wheel-dedicated-buffers-reorg-tabwins|
Grep edit mode			|wheel-dedicated-buffers-grep-edit|
Undo list			|wheel-dedicated-buffers-undolist|
Batch buffer			|wheel-dedicated-buffers-batch|
Command output buffer		|wheel-dedicated-buffers-command|

------------------------------------------------------------------------------
INTRODUCTION				*wheel-dedicated-buffers-introduction*

Dedicated buffers allow you to perform Wheel operations intuitively, using
full power of your editor : search, yank, paste, completion, and so on.

The available actions depend on the buffer type :

- menu buffers allow you to launch a wheel function
- navigation buffers allow you to switch to a :
  + location, circle or torus
  + MRU file, locate file
  + grep result
  + and so on
- reordering buffers allow you to reorder locations, circles or toruses
- reorganize buffer allows you fine grain operations
  + move, copy or delete locations, circles and toruses, using folds
  + change locations settings like name, line, col
  + be sure you know what you’re doing
- reorganize tabs and windows

Mandala~

A mandala is a synonym for a wheel dedicated buffer.

Wrapping up things~

In normal mode, the keys `j`/`k` and `<up>`/`<down>` wrap the buffer :

- if on the first line, `k` or `<up>` will go to the last line
- if on the last line, `j` or `<down>` will go to the first line

Filtering~

In most dedicated buffers, the first line is left empty : it is used as
an input line to filter the buffer. You can go to insert mode and filter
the elements with each word you enter on the input (first) line. Typing
`<space>`, `<esc>` or `<enter>` will update the candidates. Note that `<C-c>`
is not mapped, in case you need to go to normal mode without triggering
the filter function.

A space between two words is a logical and. So, `one two` will
display lines containing both `one` and `two`.

A pipe `|` in the middle of a word is a logical or. So, `one|two` will
display lines containing `one` or `two`.

A bang `!` beginning a filtering word is a logical not : all lines matching
this word will be removed from the buffer.

Input history~

An input history is available in insert mode. You can insert the
previous/next input with `<Up>`/`<Down>` or `<M-p>`/`<M-n>`.

The keys `<PageUp>`/`PageDown` or `<M-r>`/`<M-s>` will insert the
previous/next input matching the beginning of the inserted line, until
the cursor.

Action~

The main keys are :

- `<enter>` : trigger the default action, close the dedicated buffer
- `g<enter>` : trigger the default action, leave the dedicated buffer opened

Select entries~

Some dedicated buffers will act on selected entries. You can hit :

- `<space>` to toggle the selection of a line
- `&` to reverse the selection of all visible lines
- `*` to select all visible lines
- `|` to clear the selection of all visible lines

Reload~

Press `r` and the dedicated buffer will reload its content.

Available on most dedicated buffers.

------------------------------------------------------------------------------
LAYER STACK				*wheel-dedicated-buffers-layers*

Each time you launch a wheel function involving a dedicated buffer, a new
associated layer is added to a stack local to the buffer. You may see it
as a kind of dedicated buffer history. You can :

- go back to the previous layer (and associated wheel function) by pressing `H`
- go forward to the next layer by pressing `L`
- switch to another layer with `<M-l>`, completion is available
- destroy current layer and go back to the previous one by pressing `<backspace>`

The maximum size of the layer stack is determined by `g:wheel_config.maxim.layers`

------------------------------------------------------------------------------
BUFFERS STACK				*wheel-dedicated-buffers-stack*

Wheel manages a dedicated buffers stack. You can :

- push a new dedicated buffer as default one with `<M-w><Tab>`
- switch to another dedicated buffer with `<M-w><M-Space>`, completion is available
- cycle the dedicated buffers with `<M-w><home>` (left) or `<M-w><end>` (right)
- remove the current dedicated buffer with `<M-w><Backspace>`
  + it is removed from the stack and wiped from vim buffers

So, there are two stack levels :

- a layer stack in each dedicated buffer
- a buffer stack

------------------------------------------------------------------------------
MENU BUFFERS				*wheel-dedicated-buffers-menus*

Each menu has its own dedicated dedicated buffer. You can filter the menu
lines by entering words in insert mode.

Action~

In menu buffers, `<tab>` is a synonym for `<enter>` : trigger action.

Since there is no need to select multiple elements, `<space>` is a
shortcut for `g<enter>` : launch action and leave the menu opened.

Main menu~

The main menu is triggered with `<M-w>m` by default. From there, you
can launch the action you want by pressing `<enter>` on its line. Same
thing for `g<enter>`, but it will leave the dedicated buffer opened.

The available actions are grouped by themes and folded. Just open a fold to
access its content.

Meta menu~

Press `<M-w>=` to open the meta menu : each line in this buffer will
launch a sub-menu. Each sub-menu holds the actions of the same category :

- add a new element to the wheel
- rename an element
- delete an element
- alternate last two elements
- layouts
  + in tabs
  + in windows
  + in tabs & windows
- reorganize elements
- navigation
- search in files
- run a command and collect its output
- paste from yank wheel

In these sub-menus, you can use the keys :

- `<enter>`             : launch the action on the cursor line
- `g<enter>`, `<space>`   : launch action and leave the menu opened
- `<backspace>`         : leads you back to the meta menu

------------------------------------------------------------------------------
CONTEXT MENUS				*wheel-dedicated-buffers-context*

Some dedicated buffers have context menu support. In that case, pressing
`<tab>` will open a menu where you can choose the action you want to
apply to the selected or cursor line(s).

If you change your mind and wish to come back, just press `<backspace>`.

------------------------------------------------------------------------------
NAVIGATION BUFFERS			*wheel-dedicated-buffers-navigation*

The navigation buffers allow you to quickly switch to a Wheel location
by pressing `<enter>` on the matching line. The buffer will be opened
in previous used window. You can also use the keys :

- `t` : open buffer in a new tab
- `s` : open buffer in a new split
- `v` : open buffer in a new vsplit
- `S` : open buffer in a new split with golden ratio
- `V` : open buffer in a new vsplit with golden ratio

Same keys as above, but leave the navigation buffer opened :

- `g<enter>` : same as `<enter>`
- `gt` : same as `t`
- `gs` : same as `s`
- `gv` : same as `v`
- `gS` : same as `S`
- `gV` : same as `V`

The navigation buffers also have context menus support.
See |wheel-dedicated-buffers-context|.

Mappings~

The default mappings launching navigation buffers are :

- `<M-w><Space>`   : switch to location
- `<M-w><C-space>` : switch to current location of the chosen circle
- `<M-w><S-space>` : switch to current location of the chosen torus
- `<M-w>x`         : index of toruses > circles > locations
- `<M-w><C-x>`     : index of toruses > circles
- `<M-w><M-x>`     : index with folds (see below)
- `<M-w>h`         : history index
- `<M-w>l`         : search files with `locate`
- `<M-w>f`         : find files in current directory using `**/*pattern*` glob
- `<M-w><M-f>`     : search files with `find` in async mode
- `<M-w>u`         : most recently used files not found in wheel (mru)
- `<M-w>b`         : switch to buffer (opened file)
- `<M-w>v`         : switch to visible buffer in tab & window (plain mode)
- `<M-w><M-v>`     : switch to visible buffer in tab & window (tree fold mode)
- `<M-w>s`         : occur in current file
- `<M-w>g`         : grep in circle files
- `<M-w><M-o>`     : outline headers in circle files
- `<M-w>t`         : tags
- `<M-w>j`         : jumps list
- `<M-w>c`         : changes list

Menus~

The navigation buffers can also be launched from the main & meta menus.

Folding~

The map `<M-w><M-x>` opens a dedicated buffer where folds are used to
reflect the tree structure of the Wheel : toruses, circles and locations.

Filtering in that buffer will keep surrounding folds ; only non mathing
empty folds will be removed.

Similarly, the map `<M-w><M-t>` opens a dedicated buffer where folds
are used to reflect the tree structure of tabs and windows in (neo)vim.

Selection~

Pressing `<Space>` will toggle the selection of the current line. If a
line is selected, it will begin with an asterisk. You can then open all
selected files in tabs, splits or vertical splits.

------------------------------------------------------------------------------
GREP BUFFER				*wheel-dedicated-buffers-grep*

The default mapping is `<M-w>g`.

The navigation mappings are the same as usual : activate a buffer line
will open the right file at the right place.

Context menu~

The context menu contains :

- the usual navigation functionalities
- an edit mode, see |wheel-dedicated-buffers-grep-edit|
- a quickfix window opener

Outline~

The default mapping is `<M-w><M-o>`.

An outline buffer is a grep buffer where all your headers are displayed. You
can choose between the following header formats :

- vim folds
- markdown
- org mode
- vimwiki

------------------------------------------------------------------------------
FIND BUFFER				*wheel-dedicated-buffers-find*

Search files with find.

It runs in async mode. You can stop the process by using `<c-s>` in the
dedicated buffer.

------------------------------------------------------------------------------
YANK BUFFER				*wheel-dedicated-buffers-yank*

As usual, you can filter the elements in insert mode.
The available local maps are :

 - `<enter>` : paste a yank after cursor
 - `g<enter>` : paste a yank after cursor, leave yank wheel opened
 - `p` : paste a yank after cursor, leave yank wheel opened
 - `P` : paste a yank before cursor, leave yank wheel opened

List mode~

The yank wheel buffer in list mode is launched by `<M-w>y`.

Each line of the dedicated buffer is one of your yanks, represented as a
list, one element per line.

Plain mode~

The yank wheel buffer in plain mode is launched by `<M-w>p`.

All your yanks are concatenated and displayed in the dedicated buffer.

In normal mode, the paste is done linewise or characterwise, depending
on the mapping used :

 - `p` : paste a yank linewise after cursor, leave yank wheel opened
 - `P` : paste a yank linewise before cursor, leave yank wheel opened
 - `gp` : paste a yank characterwise after cursor, leave yank wheel opened
 - `gP` : paste a yank characterwise before cursor, leave yank wheel opened

Visual mode~

You can also go to visual mode and paste your selection. The paste is
done characterwise.

Menus~

The yank wheel buffers can also be launched from the main & meta menus.

------------------------------------------------------------------------------
REORDERING BUFFERS			*wheel-dedicated-buffers-reordering*

The reordering buffers allow you to quickly reorder Wheel elements by
reordering the buffer lines. You can use yank/delete/paste operations to
perform the reordering, or sort them with |:sort|.

Please yank/delete entire lines, or your data could loose their integrity.

To validate your change, simply |:write| the buffer.

The number of lines will be checked and, if there is missing or excedent
lines, Wheel will refuse to apply your change.

Mappings~

The default mappings launching reordering buffers are :

- `<M-w>o`     : reorder locations
- `<M-w><C-o>` : reorder circles
- `<M-w>O`     : reorder toruses

Menus~

The reordering buffers can also be launched from the main & meta menus.

Pressed the wrong button ?~

If something goes wrong, you can quit the buffer and re-read the wheel
variables with `<M-w>r`.

------------------------------------------------------------------------------
REORGANIZING BUFFERS			*wheel-dedicated-buffers-reorganizing*

The reorganizing buffer allows you to quickly reorganize the Wheel
elements. All elements of the wheel are represented, and folds are used
to reflect the tree structure of the Wheel :

- torus names
- circle names
- locations (the dictionary lines)

You can :

- copy or move elements by copying or moving the buffer lines
  + copy or move a location to another circle
  + copy or move a circle to another torus
  + reordering elements (but without check)
- rename elements
- change line or column of a location

Please move or copy entire lines, or your data could loose their
integrity. Be aware that removing a line will remove the corresponding
element from the wheel.

To validate your change, simply |:write| the buffer.

Mappings~

The default mapping is `<M-w><M-r>`.

Menus~

The reorganizing buffer can also be launched from the main & meta menus.

Pressed the wrong button ?~

If something goes wrong, you can quit the buffer and re-read the wheel
variables with `<M-w>r`.

------------------------------------------------------------------------------
REORGANIZE TABS AND WINDOWS		*wheel-dedicated-buffers-reorg-tabwins*

In this buffer, you can :

- add new tabs
- add files in new windows
  + the split will be horizontal or vertical, depending
    on the aspect ratio of the preceding window
- move, copy or delete tabs
- move, copy or delete windows

To validate your change, simply |:write| the buffer.

Mappings~

The default mapping is `<M-w><C-r>`.

Menus~

This buffer can also be launched from the main & meta menus.

From context menu~

This buffer can also be launched from the context menu of a tabs & windows
navigation buffer.

------------------------------------------------------------------------------
GREP EDIT MODE				*wheel-dedicated-buffers-grep-edit*

The edit mode will open a new buffer where you can edit the grep lines. If
you write this buffer, the plugin will propagate your changes to the
grepped file(s). There are some limitations, however :

- you cannot add or remove entire lines
- if you exchange or shuffle lines, they will be exchanged or shuffled in your
  files too, which can lead to an undesired mess.

Note that :

- the plugin will not write the grepped files for you.
- you can of course undo the changes you made if you are not happy with it

Default mapping : `<M-w><M-g>`

Anyway, it's always a good thing to do a backup of your files first,
or even better, to work within a VCS repository, like git.

------------------------------------------------------------------------------
UNDO LIST				*wheel-dedicated-buffers-undolist*

In this buffer, you can reset the buffer to a previous undo position,
just hit `<enter>` on an undo line.

Before playing with this, be sure you have a backup of your file (VCS
or so).

Default mapping : `<M-w><M-u>`

With `u`, you can go back to the last undo state.

Diff mode~

With `D`, you can visualize a diff split between :

- the current state of your file
- the chosen undo state

You can even make some modifications with |do| and |dp| (or |:diffget|
and |:diffput|).

With `x`, you can close the diff split.

------------------------------------------------------------------------------
BATCH BUFFER				*wheel-dedicated-buffers-batch*

See |wheel-batch-command|.

------------------------------------------------------------------------------
COMMAND OUTPUT BUFFER			*wheel-dedicated-buffers-command*

You can execute an ex or shell command and display the output in a wheel
dedicated buffer. Shell commands must be prefixed by a `!`.

Default mapping : `<M-w>:`

Examples :

- `<M-w>:` then `nmap <silent> <plug>(wheel-`
- `<M-w>:` then `nmap <silent> <M-w>`
- `<M-w>:` then `!ls -l % #`

Async mode~

You can run a shell command in async mode and display the output in a
dedicated buffer.

Default mapping : `<M-w>&`

You can stop the process by using `<c-s>` in the dedicated buffer.

==============================================================================
BATCH OPERATIONS				    *wheel-batch-operations*

Batch command			|wheel-batch-command|

------------------------------------------------------------------------------
BATCH COMMAND					    *wheel-batch-command*

The command : >

 :WheelBatch {my_command}
<

uses the argument list to execute `my_command` on each location of the
current circle. The command can be a vim `:command` or an external shell
`!command`. The ouput is displayed in a dedicated buffer.

==============================================================================
CONFIGURATION					    *wheel-configuration*

Vim options				|wheel-config-vim-options|
Dictionary				|wheel-config-dictionary|
File					|wheel-config-file|
Autoread				|wheel-config-autoread|
Autowrite				|wheel-config-autowrite|
Backups					|wheel-config-backups|
Mappings				|wheel-config-mappings|
Prefix					|wheel-config-prefix|
Cd project				|wheel-config-cd_project|
Project markers				|wheel-config-project_markers|
Locate database				|wheel-config-locate-db|
Grep ex command				|wheel-config-grep|
Max history 				|wheel-config-maxim-history|
Max input history 			|wheel-config-maxim-input|
Max MRU					|wheel-config-maxim-mru|
Max yanks 				|wheel-config-maxim-yanks|
Max yank size 				|wheel-config-maxim-yank_size|
Max layers in dedicated buffers		|wheel-config-maxim-layers|
Max number of tabs			|wheel-config-maxim-tabs|
Max number of horizontal splits		|wheel-config-maxim-horizontal|
Max number of vertical splits		|wheel-config-maxim-vertical|
Tabline					|wheel-config-tabline|
Example					|wheel-config-example|

------------------------------------------------------------------------------
VIM OPTIONS					*wheel-config-vim-options*

To facilitate the navigation between buffers, the following vim options
can be useful : >

    set hidden
    set bufhidden=hide
<

If you don't want to activate these options, remember to write your
files before using a wheel navigation tool.

To enable nice completion in prompting wheel functions : >

    set wildchar=<TAB>
    set wildmode=longest,full
<

See |'wildmode'| to adapt it to your taste.

To spot the cursor line in other windows while browsing
a |wheel-dedicated-buffers|, you can either :

- activate the |'cursorline'| option
- activate the |'number'| and |'relativenumber'| options,
  and set |hl-CursorLineNr| to a different color than |hl-LineNr|

------------------------------------------------------------------------------
DICTIONARY					  *wheel-config-dictionary*

Customization is done using the `g:wheel_config` dictionary. You must
first initialize it : >

    let g:wheel_config       = {}
    let g:wheel_config.maxim = {}
<

------------------------------------------------------------------------------
FILE						    *wheel-config-file*

File to save or load the wheel : >

    let g:wheel_config.file = '~/.local/share/wheel/auto.vim'
<

Note that the directory `~/.local/share/wheel` must exist.

It is highly recommended to define this file and regularly save it,
either manually or automatically, using the autowrite config.

------------------------------------------------------------------------------
AUTOREAD					    *wheel-config-autoread*

Auto read torus file on startup if non null : >

    let g:wheel_config.autoread = 1
<

To enable it, you need to add an autocommand on vim enter : >

  autocmd VimEnter * call wheel#void#init()
<

------------------------------------------------------------------------------
AUTOWRITE					    *wheel-config-autowrite*

Auto write torus file on exit if non null : >

    let g:wheel_config.autowrite = 1
<

To enable it, you need to add an autocommand on vim leave : >

    autocmd VimLeave * call wheel#void#exit()
<

------------------------------------------------------------------------------
BACKUPS						    *wheel-config-backups*

Number of backup for the wheel file : >

    let g:wheel_config.backups = 3
<

Assuming your wheel file is `auto.vim`, the backups will be named
`auto.vim.1`, `auto.vim.2`, `auto.vim.3`, and so on.

It is recommended to use backups, in case things get messed up
accidentally.

------------------------------------------------------------------------------
MAPPINGS					    *wheel-config-mappings*

Determine how many default mappings are available : >

    let g:wheel_config.mappings = 10
<

See |wheel-mappings-levels| for more information.

------------------------------------------------------------------------------
PREFIX						    *wheel-config-prefix*

Prefix for mappings of level 0, 1, 2 : >

    let g:wheel_config.prefix = '<my-wonderful-prefix>'
<

It's `<M-w>` by default.  See |wheel-mappings-prefix| for more
information.

------------------------------------------------------------------------------
CD PROJECT					*wheel-config-cd_project*

Try to change directory to project root if > 0 : >

    let g:wheel_config.cd_project = 1
<

To find the right folder, the plugin looks at files or dirs listed in
`g:wheel_config.project_markers`, see below.

------------------------------------------------------------------------------
PROJECT MARKERS				*wheel-config-project_markers*

File(s) or directories(s) marking a project root. Can take a string or
list value. : >

    let g:wheel_config.project_markers = '.git'
    let g:wheel_config.project_markers = ['.git', '.my-project-root']
<

------------------------------------------------------------------------------
LOCATE DATABASE			    		*wheel-config-locate-db*

If you want to use a custom database when using `locate` : >

  let g:wheel_config.locate_db = '~/my_locate.db'
<

------------------------------------------------------------------------------
GREP EX COMMAND			    		*wheel-config-grep*

Whether to use internal |:vimgrep| or external |:grep| to grep files : >

  let g:wheel_config.grep = 'vimgrep'
  " or
  let g:wheel_config.grep = 'grep'
<

Defaults to internal vimgrep, in case external grep is not available.

------------------------------------------------------------------------------
MAX NUMBER OF ELEMENTS IN HISTORY		   *wheel-config-maxim-history*

Maximum number of elements in the wheel history : >

    let g:wheel_config.maxim.history = 50
<

------------------------------------------------------------------------------
MAX NUMBER OF ELEMENTS IN INPUT HISTORY		   *wheel-config-maxim-input*

Maximum number of elements in the input history : >

    let g:wheel_config.maxim.input = 100
<

------------------------------------------------------------------------------
MAX NUMBER OF ELEMENTS IN MRU			*wheel-config-maxim-mru*

Maximum number of elements in mru : >

  let g:wheel_config.maxim.mru = 120
<

------------------------------------------------------------------------------
MAX NUMBER OF ELEMENTS IN YANK WHEEL		   *wheel-config-maxim-yanks*

Maximum number of elements in the yank wheel : >

    let g:wheel_config.maxim.yanks = 300
<

------------------------------------------------------------------------------
MAX SIZE OF A YANK IN YANK WHEEL	   *wheel-config-maxim-yank_size*

Maximum size of elements in the yank wheel : >

    let g:wheel_config.maxim.yank_size = 3000
<

------------------------------------------------------------------------------
MAX LAYERS IN dedicated bufferS		    *wheel-config-maxim-layers*

Maximum size of layer stack in dedicated buffers : >

	let g:wheel_config.maxim.layers = 5
<

------------------------------------------------------------------------------
MAX NUMBER OF TABS			    *wheel-config-maxim-tabs*

Maximum number of tabs in tab layouts : >

  let g:wheel_config.maxim.tabs = 12
<

------------------------------------------------------------------------------
MAX NUMBER OR HORIZONTAL SPLITS		    *wheel-config-maxim-horizontal*

Maximum number of horizontal splits in layouts : >

  let g:wheel_config.maxim.horizontal = 3
<

------------------------------------------------------------------------------
MAX NUMBER OR VERTICAL SPLITS		    *wheel-config-maxim-vertical*

Maximum number of vertical splits in layouts : >

  let g:wheel_config.maxim.vertical = 4
<

------------------------------------------------------------------------------
TABLINE					*wheel-config-tabline*

Text~

If you want wheel to manage your tabline, use this function : >

  set tabline=%!wheel#status#tabline()
<

Gui tabs of gvim~

If you are using gui tabs in gvim, you can ask wheel to manage the
labels : >

  set guitablabel=%{wheel#status#guitablabel()}
<

Gui tabs of nvim-qt~

TODO

------------------------------------------------------------------------------
EXAMPLE					    *wheel-config-example*

Here is an example of a complete configuration : >

  " Init
  let g:wheel_config={}
  let g:wheel_config.maxim={}

  " The file where toruses and circles will be stored and read
  let g:wheel_config.file = '~/.local/share/wheel/auto.vim'
  " Auto read torus file on startup if > 0
  let g:wheel_config.autoread = 1
  " Auto write torus file on exit if > 0
  let g:wheel_config.autowrite = 1
  " Number of backups for the wheel file
  let g:wheel_config.backups = 5
  " The bigger it is, the more mappings available
  let g:wheel_config.mappings = 10
  " Prefix for mappings
  let g:wheel_config.prefix = '<M-w>'
  " Auto cd to project root if > 0
  let g:wheel_config.cd_project = 1
  " Marker of project root
  "let g:wheel_config.project_markers = '.git'
  "let g:wheel_config.project_markers = '.racine-projet'
  " List of markers
  " The project dir is found as soon as one marker is found in it
  let g:wheel_config.project_markers = ['.git', '.racine-projet']
  " Locate database ; default one if left empty
  let g:wheel_config.locate_db = '~/racine/index/locate/racine.db'
  " Grep command : :grep or :vimpgrep
  let g:wheel_config.grep = 'grep'

  " Maximum number of elements in history
  let g:wheel_config.maxim.history = 50
  " Maximum number of elements in input history
  let g:wheel_config.maxim.input = 100

  " Maximum number of elements in mru
  let g:wheel_config.maxim.mru = 120

  " Maximum number of elements in yank wheel
  let g:wheel_config.maxim.yanks = 300
  " Maximum size of elements in yank wheel
  let g:wheel_config.maxim.yank_size = 3000

  " Maximum number of tabs
  let g:wheel_config.maxim.tabs = 12
  " Maximum number of horizontal splits
  let g:wheel_config.maxim.horizontal = 3
  " Maximum number of vertical splits
  let g:wheel_config.maxim.vertical = 4
<

==============================================================================
AUTOCOMMANDS					   *wheel-autocommands*

Auto read			|wheel-autocommands-auto-read|
Auto write			|wheel-autocommands-auto-write|
After jump			|wheel-autocommands-after-jump|
Auto follow			|wheel-autocommands-auto-follow|
Auto update			|wheel-autocommands-auto-update|
MRU files			|wheel-autocommands-mru-files|
Yank wheel			|wheel-autocommands-yank|
Example				|wheel-autocommands-example|

------------------------------------------------------------------------------
AUTO GROUP				*wheel-autocommands-autogroup*

It's a good idea to group all your wheel autocommands, e.g. : >

    augroup wheel
	autocmd ...
	autocmd ...
	...
    augroup END
<

Be aware that the autogroup `wheel-mandala` is used for dedicated buffers
local autocommands, so you can't use this name.

------------------------------------------------------------------------------
AUTO READ				*wheel-autocommands-auto-read*

To enable autoread, you need to add an autocommand on vim enter : >

    autocmd VimEnter * call wheel#void#init()
<

------------------------------------------------------------------------------
AUTO WRITE				*wheel-autocommands-auto-write*

To enable autowrite, you need to add an autocommand on vim leave : >

    autocmd VimLeave * call wheel#void#exit()
<

------------------------------------------------------------------------------
AFTER JUMP				*wheel-autocommands-after-jump*

The user autocommands `WheelAfterJump` are executed at the end of each
navigation operation in the Wheel ; basically, each time you jump to
another file using wheel group functions.

This example fold everything except the cursor line : >

    autocmd User WheelAfterJump norm zMzx
<

This example open recursively the folds under the cursor line : >

    autocmd User WheelAfterJump norm zCzO
<

------------------------------------------------------------------------------
AUTO FOLLOW		    		*wheel-autocommands-auto-follow*

If you wish the wheel to auto-follow the buffers you enter, you can add
this autocommand : >

    autocmd BufEnter * call wheel#projection#follow()
<

This means that each time you enter a buffer, the plugin will check if
the filename is in the wheel. If true, it will adjust its state to match
the current file.

It is useful when you search with grep and the quickfix window, or when
you edit a file with a classic vim command.

Be aware that it will update the wheel cursor position of your previous
buffer, which makes sense.

Also note that if the file you edit is not in the wheel, the follow
routine will do nothing.  If you want to edit a file and add it to the
current group (circle), you can use `<plug>(wheel-add-file)`. It is
bound to `<M-w>+f` by default.

To edit and add a buffer, you can use `<plug>(wheel-add-buffer)`, bound to
`<M-w>b` by default.

------------------------------------------------------------------------------
AUTO UPDATE				*wheel-autocommands-auto-update*

If you want to update your cursor position each time you leave a buffer : >

  autocmd BufLeave * call wheel#vortex#update()
<

------------------------------------------------------------------------------
MRU files				    *wheel-autocommands-mru-files*

If you want to record a list of the files you edited without adding them
to the wheel : >

  autocmd BufRead * call wheel#attic#record()
<

------------------------------------------------------------------------------
YANK WHEEL					*wheel-autocommands-yank*

If you want to record your yanks/delete, you can add this autommand to
your init file : >

 autocmd TextYankPost * call wheel#codex#add()
<

------------------------------------------------------------------------------
EXAMPLE					    *wheel-autocommands-example*

Here is an example of a complete autocommands configuration : >

  " On vim enter, for autoreading
  autocmd VimEnter * call wheel#void#init()
  " On vim leave, for autowriting
  autocmd VimLeave * call wheel#void#exit()
  " Executed after jumping to a location
  autocmd User WheelAfterJump norm zMzx
  " For current wheel location to auto follow buffer change
  autocmd BufEnter * call wheel#projection#follow()
  " Update location line & col before leaving a window
  autocmd BufLeave * call wheel#vortex#update()
  " Add current file to MRU files
  autocmd BufRead * call wheel#attic#record()
  " To record your yanks in the yank wheel
  autocmd TextYankPost * call wheel#codex#add()
<

==============================================================================
FUNCTIONS					        *wheel-functions*

User interface			|wheel-functions-user-interface|
Async process			|wheel-functions-async-process|

------------------------------------------------------------------------------
USER INTERFACE				*wheel-functions-user-interface*

The functions used as User Interface are listed :

- in the mappings of autoload/wheel/centre.vim
- in the menus of autoload/wheel/crystal.vim

------------------------------------------------------------------------------
ASYNC PROCESS					*wheel-functions-async-process*

wheel#wave#start({command}, {settings})		*wheel-wave-start*
	Neovim only.
	Start an async command and display its output in a dedicated buffer.
	You can filter buffer content, as usual.
	{settings} is a dictionary containing the following keys :
	- new_buffer : whether to open a dedicated buffer
	  before launching the process (true by default)

wheel#ripple#start({command}, {settings})		*wheel-ripple-start*
	Vim only.
	Same as |wheel#wave#start|, but for Vim only.

==============================================================================
MAPPINGS						    *wheel-mappings*

Levels				|wheel-mappings-levels|
Prefix				|wheel-mappings-prefix|
Mnemonic			|wheel-mappings-mnemonic|
Level 0				|wheel-mappings-level-0|
Level 1				|wheel-mappings-level-1|
Level 2				|wheel-mappings-level-2|
Level 10			|wheel-mappings-level-10|
Level 20			|wheel-mappings-level-20|
Exhaustive list			|wheel-mappings-exhaustive-list|
Other ideas			|wheel-mappings-ideas|

------------------------------------------------------------------------------
LEVELS						    *wheel-mappings-levels*

The mappings are organized in levels :

- level 0  : basic
- level 1  : common
- level 2  : advanced
- level 10 : non-prefix mappings

If you set the option `g:wheel_config.mappings` to an integer `N`, all
mappings of level less or equal to `N` will be bound to keys. So, the
higher this option, the more mappings available.

E.g., if you set it to 2 : >

    let g:wheel_config.mappings = 2
<
mappings levels 0, 1 and 2 will be available.

Level 1 or 2 is fine for most usages. Level 10 is interesting if you are
looking for ideas of non-prefix mappings. See |wheel-mappings-level-0| and
subsequent for more information.

------------------------------------------------------------------------------
PREFIX						    *wheel-mappings-prefix*

Default mappings of levels 0, 1, 2 use a prefix key. This prefix is `<M-w>` by
default. You can customize it : >

    let g:wheel_config.prefix = '<my-wonderful-prefix>'
<

I like to set it to `<D-w>`, but since the `<D-...>` mappings don't seem
to work in terminal or with Gvim, it is not the default. It's working on
Neovim-qt, though : >

    let g:wheel_config.prefix = '<D-w>'
<

In the following discussion, I assume that you have kept the default
`<M-w>` prefix.

------------------------------------------------------------------------------
MNEMONIC					*wheel-mappings-mnemonic*

Most mappings respect the following convention :

- prefix + `letter`     : location operation
- prefix + `<C-letter>` : circle operation
- prefix + `<S-letter>` : torus operation
- prefix + `<M-letter>` : alternative operation

------------------------------------------------------------------------------
LEVEL 0						*wheel-mappings-level-0*

Menus~

The most important mapping is `<M-w>m` : it launches a menu in a
dedicated buffer, and from there you can trigger all sort of actions on
the Wheel. See |wheel-dedicated-buffers-menu| for more information.

| Prefix + | With default prefix | Action                  |
| -------- | ------------------- | ----------------------- |
| m        | <M-w>m              | Main menu               |
| =        | <M-w>=              | Meta menu               |

Add~

| Prefix +   | With default prefix   | Action                             |
| ---------- | --------------------- | ---------------------------------- |
| a          | <M-w>a                | Add location to the current circle |
| <C-a>      | <M-w><C-a>            | Add circle to the current torus    |
| A          | <M-w>A                | Add torus to the wheel             |
| ---------- | --------------------- | ---------------------------------- |
| +f         | <M-w>+f               | Edit and add a file                |
| +b         | <M-w>+b               | Edit and add a buffer              |
| *          | <M-w>*                | Add files matching glob            |

Next / previous~

| Prefix +   | With default prefix   | Action                  |
| ---------- | --------------------- | ------------------------|
| <left>     | <M-w><left>           | Go to previous location |
| <right>    | <M-w><right>          | Go to next location     |
| ---------- | --------------------- | ------------------------|
| <C-left>   | <M-w><C-left>         | Go to previous circle   |
| <C-right>  | <M-w><C-right>        | Go to next circle       |
| ---------- | --------------------- | ------------------------|
| <S-left>   | <M-w><S-left>         | Go to previous torus    |
| <S-right>  | <M-w><S-right>        | Go to next torus        |

Read / Write file~

| Prefix + | With default prefix | Action             |
| r        | <M-w>r              | Load wheel file    |
| w        | <M-w>w              | Save wheel in file |

------------------------------------------------------------------------------
LEVEL 1						*wheel-mappings-level-1*

Rename~

| Prefix + | With default prefix | Action                  |
| -------- | ------------------- | ----------------------- |
| n        | <M-w>n              | Rename current location |
| <C-n>    | <M-w><C-n>          | Rename current circle   |
| N        | <M-w>N              | Rename current torus    |

Delete~

| Prefix + | With default prefix | Action                  |
| -------- | ------------------- | ----------------------- |
| d        | <M-w>d              | Delete current location |
| <C-d>    | <M-w><C-d>          | Delete current circle   |
| D        | <M-w>D              | Delete current torus    |

Switch~

| Prefix +  | With default prefix | Action                             |
| --------- | ------------------- | ---------------------------------- |
| <Enter>   | <M-w><Enter>        | Switch to location with completion |
| <C-CR>    | <M-w><C-Enter>      | Switch to circle with completion   |
| <S-CR>    | <M-w><S-Enter>      | Switch to torus with completion    |
| <M-CR>    | <M-w><M-Enter>      | Switch to torus, circle & location |

History~

| Prefix +    | With default prefix | Action                                        |
| ----------- | ------------------- | --------------------------------------------- |
| <Up>        | <M-w><PageUp>       | Go to newer location in history               |
| <Down>      | <M-w><PageDown>     | Go to older location in history               |
| ^           | <M-w>^              | Alternate menu                                |
| <C-^>       | <M-w><C-^>          | Alternate anywhere                            |
| <M-^>       | <M-w><M-^>          | Alternate in the same circle                  |
| <M-C-^>     | <M-w><M-C-^>        | Alternate in another circle of the same torus |

Dedicated buffers~

| Prefix +   | With default prefix   | Action                                 |
| ---------- | --------------------- | -------------------------------------- |
| <Space>    | <M-w><Space>          | Go to location                         |
| <C-Space>  | <M-w><C-Space>        | Go to circle                           |
| <S-Space>  | <M-w><S-Space>        | Go to torus                            |
| ---------- | --------------------- | -------------------------------------- |
| x          | <M-w>x                | Index of toruses > circles > locations |
| <C-x>      | <M-w><C-x>            | Index of toruses > circles             |
| <M-x>      | <M-w><M-x>            | Treeish index with folds               |
| ---------- | --------------------- | -------------------------------------- |
| h          | <M-w>h                | History index                          |
| ---------- | --------------------- | -------------------------------------- |
| o          | <M-w>o                | Reorder locations in current circle    |
| <C-o>      | <M-w><C-o>            | Reorder circles in current torus       |
| O          | <M-w>O                | Reorder toruses in wheel               |

------------------------------------------------------------------------------
LEVEL 2						*wheel-mappings-level-2*

Search for files~

| Prefix + | With default prefix | Action                                      |
| -------- | ------------------- | ------------------------------------------- |
| l        | <M-w>l              | Search files with locate                    |
| f        | <M-w>f              | Find files in current directory using glob  |
| <M-f>    | <M-w><M-f>          | Search files with find in async mode        |
| u        | <M-w>u              | Most recently used files not found in wheel |
| b        | <M-w>b              | Buffers (opened files)                      |

Tabs & windows~

Visible buffers displayed in tabs & windows.

| Prefix + | With default prefix | Action                                            |
| -------- | ------------------- | ------------------------------------------------  |
| v        | <M-w>v              | Switch to visible buffer with completion          |
| V        | <M-w>V              | Visible buffers in a dedicated buffer             |
| <M-v>    | <M-w><M-v>          | Tree view of tabs & windows in a dedicated buffer |

Search inside files~

| Prefix + | With default prefix | Action                               |
| -------- | ------------------- | ------------------------------------ |
| s        | <M-w>s              | Search lines in current file         |
| g        | <M-w>g              | Search in circle files with grep     |
| <M-o>    | <M-w><M-o>          | Outline : folds, markdown, org mode  |
| t        | <M-w>t              | Tags                                 |
| j        | <M-w>j              | Jumps                                |
| c        | <M-w>c              | Changes                              |

Yank wheel~

| Prefix + | With default prefix | Action                    |
| -------- | ------------------- | ------------------------- |
| y        | <M-w>y              | Yank wheel in list mode   |
| p        | <M-w>p              | Yank wheel in plain mode  |

Command output buffer~

| Prefix + | With default prefix | Action                      |
| -------- | ------------------- | ----------------------------|
| :        | <M-w>:              | Display ex or !shell output |
| &        | <M-w>&              | Async sheel command         |

Reorganizing buffers~

| Prefix + | With default prefix | Action                    |
| -------- | ------------------- | ------------------------- |
| <M-r>    | <M-w><M-r>          | Reorganize wheel elements |
| <C-r>    | <M-w><C-r>          | Reorganize tabs & windows |
| <M-g>    | <M-w><M-g>          | Grep edit mode            |

Miscellaneous~

| Prefix + | With default prefix | Action     |
| -------- | ------------------- | ---------- |
| <M-u>    | <M-w><M-u>          | Undo list  |

Managing dedicated buffers~

| Prefix +    | With default prefix | Action                             |
| --------    | ------------------- | ---------------------------------  |
| <Tab>       | <M-w><Tab>          | Save (push) dedicated buffer       |
| <Backspace> | <M-w><Backspace>    | Remove (pop) dedicated buffer      |
| <M-Space>   | <M-w><M-Space>      | Switch to another dedicated buffer |
| <M-Home>    | <M-w><M-Home>       | Cycle dedicated buffers, leftward  |
| <End>       | <M-w><End>          | Cycle dedicated buffers, rightward |

Layouts~

You can display all locations of the current circle, one location per
tab or window. Same idea with circles and toruses.

Available layouts are : horizontal or vertical split, main top, main
left, grid.

You can also display one circle per tab, and one location per window, or
one torus per tab and one circle per window.

Note that all layout mappings use the subprefix `z`, so all layout maps begin
with `<M-w>z`.

| Prefix +   | With default prefix   | Action                                |
| --------   | -------------------   | --------------------                  |
| zz         | <M-w>zz               | Zoom : one tab, one window            |
| --------   | -------------------   | --------------------                  |
| zt         | <M-w>zt               | One location per tab                  |
| z<C-t>     | <M-w>z<C-t>           | One circle per tab                    |
| zT         | <M-w>zT               | One torus per tab                     |
| ---------- | --------------------- | --------------------------------      |
| zs         | <M-w>zs               | Locations in horizontal splits        |
| z<C-s>     | <M-w>z<C-s>           | Circles in horizontal splits          |
| zS         | <M-w>zS               | Toruses in horizontal splits          |
| ---------- | --------------------- | --------------------------------      |
| zv         | <M-w>zv               | Location in vertical splits           |
| z<C-v>     | <M-w>z<C-v>           | Circles in vertical splits            |
| zV         | <M-w>zV               | Toruses in vertical splits            |
| ---------- | --------------------- | --------------------------------      |
| zm         | <M-w>zm               | Locations in main top layout          |
| z<C-m>     | <M-w>z<C-m>           | Circles in main top layout            |
| zM         | <M-w>zM               | Toruses in main top layout            |
| ---------- | --------------------- | --------------------------------      |
| zl         | <M-w>zl               | Locations in main left layout         |
| z<C-l>     | <M-w>z<C-l>           | Circles in main left layout           |
| zL         | <M-w>zL               | Toruses in main left layout           |
| ---------- | --------------------- | --------------------------------      |
| zg         | <M-w>zg               | Locations in grid layout              |
| z<C-g>     | <M-w>z<C-g>           | Circles in grid layout                |
| zG         | <M-w>zG               | Toruses in grid layout                |
| --------   | -------------------   | ------------------------------------  |
| z&         | <M-w>z&               | Circles in tabs, locations in windows |
| z<M-&>     | <M-w>z<M-&>           | Toruses in tabs, circles in windows   |
| ---------- | --------------------- | --------------------------------      |
| z<up>      | <M-w>z<up>            | Rotate windows counter-clockwise      |
| z<down>    | <M-w>z<down>          | Rotate windows clockwise              |

------------------------------------------------------------------------------
LEVEL 10					*wheel-mappings-level-10*

The level 10 offers mappings without prefix for the most used wheel
functions. You can set the mapping level to 10 to activate them, or
adapt them to your taste and add them to your init file.

| Mapping        | Action                                        |
| -------------- | --------------------------------------------- |
| <M-=>          | Meta menu                                     |
| <M-m>          | Main menu                                     |
| -------------- | --------------------------------------------- |
| <M-Insert>     | Add location to the current circle            |
| <M-Del>        | Delete current location                       |
| -------------- | --------------------------------------------- |
| <C-PageUp>     | Go to previous location                       |
| <C-PageDown>   | Go to next location                           |
| <C-Home>       | Go to previous circle                         |
| <C-End>        | Go to next circle                             |
| <S-Home>       | Go to previous torus                          |
| <S-End>        | Go to next torus                              |
| -------------- | --------------------------------------------- |
| <S-PageUp>     | Go to newer location in history               |
| <S-PageDown>   | Go to older location in history               |
| -------------- | --------------------------------------------- |
| <C-^>          | Alternate last two locations                  |
| <M-^>          | Alternate in the same circle                  |
| <M-C-^>        | Alternate in another circle of the same torus |
| -------------- | --------------------------------------------- |
| <M-Enter>      | Prompt for a location to switch to            |
| <C-Enter>      | Prompt for a circle to switch to              |
| <S-Enter>      | Prompt for a torus to switch to               |
| -------------- | --------------------------------------------- |
| <Space>        | Choose location in dedicated buffer           |
| <C-Space>      | Choose circle in dedicated buffer             |
| <S-Space>      | Choose torus in dedicated buffer              |
| <M-x>          | Choose element in wheel folding tree          |
| <M-C-x>        | Index of toruses > circles > locations        |
| <M-h>          | History index                                 |
| -------------- | --------------------------------------------- |
| <M-l>          | Locate                                        |
| <M-f>          | Find                                          |
| <M-C-f>        | Async find                                    |
| <M-u>          | Most Recently Used files not found in wheel   |
| -------------- | --------------------------------------------- |
| <M-b>          | Buffers (opened files)                        |
| <M-v>          | Tabs & windows in tree mode : visible buffers |
| -------------- | --------------------------------------------- |
| <M-s>          | Occur in current file                         |
| <M-g>          | Grep in current circle files                  |
| <M-o>          | Outline in current circle files               |
| <M-t>          | Tags                                          |
| <M-j>          | Jumps                                         |
| <M-c>          | Changes                                       |
| -------------- | --------------------------------------------- |
| <M-y>          | Paste yank wheel element in list mode         |
| <M-p>          | Paste yank wheel element in plain mode        |
| -------------- | --------------------------------------------- |
| <M-r>          | Reorganize wheel elements                     |
| <M-C-r>        | Reorganize tabs and windows                   |
| <M-C-g>        | Grep in edit mode                             |
| -------------- | --------------------------------------------- |
| <M-C-u>        | Undo list                                     |
| -------------- | --------------------------------------------- |
| <M-!>          | Buffer with output of ex or shell command     |
| <M-&>          | Async shell command in dedicated buffer       |
| -------------- | --------------------------------------------- |
| <M-Tab>        | Save (push) dedicated buffer                  |
| <M-Backspace>  | Remove (pop) dedicated buffer                 |
| <M-Home>       | Cycle dedicated buffers, leftward             |
| <M-End>        | Cycle dedicated buffers, rightward            |
| <M-Space>      | Switch dedicated buffer                       |
| -------------- | --------------------------------------------- |
| <M-z>          | Zoom : one tab, one window                    |
| <M-PageUp>     | Rotate windows counter clockwise              |
| <M-PageDown>   | Rotate windows clockwise                      |

Below is the default level 10. To customize it, first set your
mapping level to less than 10, then copy and adapt the following lines : >

    let nmap = 'nmap <silent>'
    " Menus
    exe nmap '<m-m>          <plug>(wheel-menu-main)'
    exe nmap '<m-=>          <plug>(wheel-menu-meta)'
    " Add, Delete
    exe nmap '<m-insert>     <plug>(wheel-add-here)'
    exe nmap '<m-del>        <plug>(wheel-delete-location)'
    " Next / Previous
    exe nmap '<c-pageup>     <plug>(wheel-previous-location)'
    exe nmap '<c-pagedown>   <plug>(wheel-next-location)'
    exe nmap '<c-home>       <plug>(wheel-previous-circle)'
    exe nmap '<c-end>        <plug>(wheel-next-circle)'
    exe nmap '<s-home>       <plug>(wheel-previous-torus)'
    exe nmap '<s-end>        <plug>(wheel-next-torus)'
    " History
    exe nmap '<s-pageup>     <plug>(wheel-history-newer)'
    exe nmap '<s-pagedown>   <plug>(wheel-history-older)'
    " Alternate
    exe nmap '<c-^>          <plug>(wheel-alternate-anywhere)'
    exe nmap '<m-^>          <plug>(wheel-alternate-same-circle)'
    exe nmap '<m-c-^>        <plug>(wheel-alternate-same-torus-other-circle)'
    " Switch prompt
    exe nmap '<m-cr>        <plug>(wheel-switch-location)'
    exe nmap '<c-cr>        <plug>(wheel-switch-circle)'
    exe nmap '<s-cr>        <plug>(wheel-switch-torus)'
    exe nmap '<m-s-cr>      <plug>(wheel-multi-switch)'
    " Navigation buffers
    exe nmap '<space>        <plug>(wheel-navigation-location)'
    exe nmap '<c-space>      <plug>(wheel-navigation-circle)'
    exe nmap '<s-space>      <plug>(wheel-navigation-torus)'
    exe nmap '<m-x>          <plug>(wheel-tree)'
    exe nmap '<m-c-x>        <plug>(wheel-index-locations)'
    exe nmap '<m-h>          <plug>(wheel-history)'
    " Search for files
    exe nmap '<m-l>          <plug>(wheel-locate)'
    exe nmap '<m-f>          <plug>(wheel-find)'
    exe nmap '<m-c-f>        <plug>(wheel-async-find)'
    exe nmap '<m-u>          <plug>(wheel-mru)'
    " Buffers
    exe nmap '<m-b>          <plug>(wheel-buffers)'
    " Tabs & windows : visible buffers
    exe nmap '<m-v>          <plug>(wheel-tabwins-tree)'
    " Search inside files
    exe nmap '<m-s>          <plug>(wheel-occur)'
    exe nmap '<m-g>          <plug>(wheel-grep)'
    exe nmap '<m-o>          <plug>(wheel-outline)'
    exe nmap '<m-t>          <plug>(wheel-tags)'
    exe nmap '<m-j>          <plug>(wheel-jumps)'
    exe nmap '<m-c>          <plug>(wheel-changes)'
    " Yank
    exe nmap '<m-y>          <plug>(wheel-yank-list)'
    exe nmap '<m-p>          <plug>(wheel-yank-plain)'
    " Reshaping buffers
    " wheel
    exe nmap '<m-r>          <plug>(wheel-reorganize)'
    " tabs & windows : visible buffers
    exe nmap '<m-c-r>        <plug>(wheel-reorg-tabwins)'
    " grep edit
    exe nmap '<m-c-g>        <plug>(wheel-grep-edit)'
    " Undo list
    exe nmap '<m-c-u>        <plug>(wheel-undo-list)'
    " Command
    exe nmap '<m-!>          <plug>(wheel-command)'
    exe nmap '<m-&>          <plug>(wheel-async)'
    " Save (push) mandala buffer
    exe nmap '<m-Tab>        <plug>(wheel-mandala-push)'
    " Remove (pop) mandala buffer
    exe nmap '<m-Backspace>  <plug>(wheel-mandala-pop)'
    " Cycle mandala buffers
    exe nmap '<m-@>          <plug>(wheel-mandala-forward)'
    " Switch mandala buffers
    exe nmap '<m-space>      <plug>(wheel-mandala-switch)'
    " Layouts
    exe nmap '<m-z>          <plug>(wheel-zoom)'
    exe nmap '<m-pageup>     <plug>(wheel-rotate-counter-clockwise)'
    exe nmap '<m-pagedown>   <plug>(wheel-rotate-clockwise)'
<

------------------------------------------------------------------------------
LEVEL 20					*wheel-mappings-level-20*

For debug only.

| Prefix + | With default prefix | Action                               |
| Z        | <M-w>Z              | Reset wheel variables to empty wheel |

------------------------------------------------------------------------------
EXHAUSTIVE LIST			*wheel-mappings-exhaustive-list*

File~

You can find all default plugs and maps in the file
`autoload/wheel/centre.vim`.


Mapped keys~

To display the list of mapped keys, press `<M-w>:` (prefix then colon),
and answer : >

    map <M-w>
<

to the prompt. You can then browse the plugs in a dedicated wheel
buffer. It is only a command output collector though, you can not
launch any map from there.

You will see that all keys are linked to `<plug>` maps.

Plugs~

Plug maps are middle men between wheel autoload functions and user
mappings. To display the list of plug maps and their matching functions,
press `<M-w>:` (prefix then colon), and answer : >

    map <plug>(wheel-
<

to the prompt.

Example of key binding using a plug map : >

    nmap <silent> <M-m> <Plug>(wheel-menu-main)
<

Do not use no-recursive maps like |:nnoremap|, it would not work.

All of these plugs are listed below.

Straightforward :

| Plug maps                                       | Description                               |
| ----------------------------------------------- | --------------------------------------    |
| <plug>(wheel-menu-main)                         | main menu                                 |
| <plug>(wheel-menu-meta)                         | meta menu                                 |
| ----------------------------------------------- | --------------------------------------    |
| <plug>(wheel-read-all)                          | read wheel from file                      |
| <plug>(wheel-write-all)                         | save wheel to file                        |
| ----------------------------------------------- | --------------------------------------    |
| <plug>(wheel-previous-location)                 | go to previous location                   |
| <plug>(wheel-next-location)                     | go to next location                       |
| <plug>(wheel-previous-circle)                   | go to previous circle                     |
| <plug>(wheel-next-circle)                       | go to next circle                         |
| <plug>(wheel-previous-torus)                    | go to previous torus                      |
| <plug>(wheel-next-torus)                        | go to next torus                          |
| <plug>(wheel-history-newer)                     | go to previous location in history        |
| <plug>(wheel-history-older)                     | go to next location in history            |
| ----------------------------------------------- | --------------------------------------    |
| <plug>(wheel-alternate-anywhere)                | alternate with last location              |
| <plug>(wheel-alternate-same-circle)             | alternate locations in same circle        |
| <plug>(wheel-alternate-same-torus)              | alternate locations in same torus         |
| <plug>(wheel-alternate-other-circle)            | alternate locations in other circle       |
| <plug>(wheel-alternate-other-torus)             | alternate locations in other torus        |
| <plug>(wheel-alternate-same-torus-other-circle) | alternate in same torus, but other circle |

Prompt :

| Plug maps                                       | Description                            |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-add-here)                          | add current file in the current circle |
| <plug>(wheel-add-circle)                        | add a new circle                       |
| <plug>(wheel-add-torus)                         | add a new torus                        |
| <plug>(wheel-add-file)                          | add a file in the current circle       |
| <plug>(wheel-add-buffer)                        | add a buffer in the current circle     |
| <plug>(wheel-add-glob)                          | add files matching glob in circle      |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-rename-location)                   | rename current location (not the file) |
| <plug>(wheel-rename-circle)                     | rename current circle                  |
| <plug>(wheel-rename-torus)                      | rename current torus                   |
| <plug>(wheel-rename-file)                       | rename current file & location         |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-delete-location)                   | delete current location                |
| <plug>(wheel-delete-circle)                     | delete current circle                  |
| <plug>(wheel-delete-torus)                      | delete current torus                   |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-switch-location)                   | switch location                        |
| <plug>(wheel-switch-circle)                     | switch circle                          |
| <plug>(wheel-switch-torus)                      | switch torus                           |
| <plug>(wheel-multi-switch)                      | switch torus, circle & location        |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-alternate-menu)                    | menu to alternate                      |

Dedicated buffers :

| Plug maps                                       | Description                            |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-navigation-location)               | switch location                        |
| <plug>(wheel-navigation-circle)                 | switch circle                          |
| <plug>(wheel-navigation-torus)                  | switch torus                           |
| <plug>(wheel-index-locations)                   | index of locations                     |
| <plug>(wheel-index-circles)                     | index of circles                       |
| <plug>(wheel-tree)                              | index of locations in tree fold format |
| <plug>(wheel-history)                           | index of locations history             |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-locate)                            | search file with locate                |
| <plug>(wheel-find)                              | find file in current dir               |
| <plug>(wheel-async-find)                        | search file with !find in async mode   |
| <plug>(wheel-mru)                               | most recently used files               |
| <plug>(wheel-buffers)                           | buffers                                |
| <plug>(wheel-tabwins)                           | visible buffers in tabs & windows      |
| <plug>(wheel-tabwins-tree)                      | tabs & windows in tree fold format     |
| <plug>(wheel-occur)                             | occurences of pattern in current file  |
| <plug>(wheel-grep)                              | grep pattern in all circle files       |
| <plug>(wheel-outline)                           | headers in all circle files            |
| <plug>(wheel-tags)                              | tags                                   |
| <plug>(wheel-jumps)                             | vim jumps                              |
| <plug>(wheel-changes)                           | vim changes                            |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-yank-list)                         | yank wheel in list format              |
| <plug>(wheel-yank-plain)                        | yank wheel in plain format             |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-reorder-location)                  | reorder locations                      |
| <plug>(wheel-reorder-circle)                    | reorder circles                        |
| <plug>(wheel-reorder-torus)                     | reorder toruses                        |
| <plug>(wheel-reorganize)                        | reorganize wheel treeish structure     |
| <plug>(wheel-reorg-tabwins)                     | reorganize tabs & windows              |
| <plug>(wheel-grep-edit)                         | grep circle files in edit mode         |
| <plug>(wheel-undo-list)                         | go to undo state, compare with diff    |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-command)                           | output of ex or shell command          |
| <plug>(wheel-async)                             | output of shell command in async mode  |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-mandala-push)                      | push a new dedicated buffer            |
| <plug>(wheel-mandala-pop)                       | pop current dedicated buffer           |
| <plug>(wheel-mandala-forward)                   | go to next dedicated buffer            |
| <plug>(wheel-mandala-backward)                  | go to previous dedicated buffer        |
| <plug>(wheel-mandala-switch)                    | switch to another dedicated buffer     |

Layouts :

| Plug maps                                       | Description                            |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-zoom)                              | one tab, one window                    |
| <plug>(wheel-tabs-locations)                    | one location of current circle per tab |
| <plug>(wheel-tabs-circles)                      | one circle of current torus per tab    |
| <plug>(wheel-tabs-toruses)                      | one torus per tab                      |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-split-locations)                   | one location per split                 |
| <plug>(wheel-split-circles)                     | one circle per split                   |
| <plug>(wheel-split-toruses)                     | one torus per split                    |
| <plug>(wheel-vsplit-locations)                  | one location per vertical split        |
| <plug>(wheel-vsplit-circles)                    | one circle per vertical split          |
| <plug>(wheel-vsplit-toruses)                    | one torus per vertical split           |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-main-top-locations)                | locations in main top layout           |
| <plug>(wheel-main-top-circles)                  | circles in main top layout             |
| <plug>(wheel-main-top-toruses)                  | toruses in main top layout             |
| <plug>(wheel-main-left-locations)               | locations in main top layout           |
| <plug>(wheel-main-left-circles)                 | circles in main top layout             |
| <plug>(wheel-main-left-toruses)                 | toruses in main top layout             |
| <plug>(wheel-grid-locations)                    | locations in grid layout               |
| <plug>(wheel-grid-circles)                      | circles in grid layout                 |
| <plug>(wheel-grid-toruses)                      | toruses in grid layout                 |
| <plug>(wheel-tab-win-torus)                     | torus in tabs, circles in windows      |
| <plug>(wheel-tab-win-circle)                    | circles in tabs, locations in windows  |
| ----------------------------------------------- | -------------------------------------- |
| <plug>(wheel-rotate-counter-clockwise)          | rotate windows counter clockwise       |
| <plug>(wheel-rotate-clockwise)                  | rotate windows clockwise               |

Miscellaneous :

| Plug maps                                       | Description                               |
| ----------------------------------------------- | --------------------------------------    |
| <plug>(wheel-spiral-cursor)                     | put the cursor in a golden ratio position |
| <plug>(wheel-debug-fresh-wheel)                 | empty the wheel for debugging purpose     |

------------------------------------------------------------------------------
OTHER IDEAS				*wheel-mappings-ideas*

Some bindings that you may find useful : >

    " alternate
    nmap <silent> <d-^> <plug>(wheel-alternate-other-torus)

    " index of locations in torus > circle > location format
    nmap <silent> <d-x> <plug>(wheel-index-locations)

    " reorganize tabs & windows
    nmap <silent> <d-v> <plug>(wheel-reorg-tabwins)

    " undo list
    nmap <silent> <d-u> <plug>(wheel-undo-list)

    " k on the beginning of the buffer -> end
    nmap <silent> k :call wheel#mandala#wrap_up()<cr>
    " j on the end of the buffer -> beginning
    nmap <silent> j :call wheel#mandala#wrap_down()<cr>

    " clear search highlight and center the cursor with Fibonacci ratio
    nmap <silent> <c-l> :nohl<cr><plug>(wheel-spiral-cursor)
    " same in insert mode
    imap <silent> <c-l> <esc>:nohl<cr><plug>(wheel-spiral-cursor)a
<

==============================================================================
COMMANDS					*wheel-commands*

:WheelDashboard					*:WheelDashboard*
	Print information of the current wheel status in the format
	`torus > circle > location`.


:WheelBatch {my_command}		       *:WheelBatch*
	Use the argument list to execute {my_command} on each location of the
	current circle. The command can be a vim `:command` or an external shell
	`!command`. The ouput is displayed in a dedicated buffer.

:WheelAutogroup				       *:WheelAutogroup*
	Autogroup locations of current torus using filename extensions or directories.
	Creates a new torus where each group will occupy a circle.

:WheelTreeScript				*:WheelTreeScript*
	Write a shell script which generates a tree of links or copies
	following the wheel hierarchy torus/circle/location.
	The script is a lot faster than using |:WheelSymlinkTree|
	or |:WheelCopiedTree|.


:WheelSymlinkTree				*:WheelSymlinkTree*
	Generate a tree of symlinks following the wheel hierarchy :
	torus/circle/link-to-location-file.


:WheelCopiedTree				*:WheelCopiedTree*
	Generate a tree of copies following the wheel hierarchy :
	torus/circle/link-to-location-file.
	Useful to make a backup of the wheel files.

==============================================================================
EXAMPLES						*wheel-examples*

Display some locations in tabs	    |wheel-examples-locations-in-tabs|
Display vim files in splits	    |wheel-examples-matching-files-in-splits|
Add a tab with a similar file	    |wheel-examples-similar-tab|
Search and replace		    |wheel-examples-search-replace|
List all tag of a kind 		    |wheel-examples-tag-kind|

------------------------------------------------------------------------------
DISPLAY SOME LOCATIONS IN TABS	    *wheel-examples-locations-in-tabs*

Just press `<M-w><space>` to launch the location navigator, select the
locations you want and press `t`.

------------------------------------------------------------------------------
DISPLAY MATCHING FILES IN SPLITS    *wheel-examples-matching-files-in-split*

- `<M-w><space>` to launch the location navigator
- `i` to go to insert mode
- enter the pattern you want
  + e.g. `\.vim$` if all your vim locations end with `.vim`
- `<enter>` to validate the pattern
- `*` to select all the visible (filtered) locations
- `v` to open all selected locations in vertical splits

------------------------------------------------------------------------------
ADD A TAB WITH A SIMILAR FILE	    *wheel-examples-similar-tab*

- press `<M-w>W` to launch the tabs & windows organizer
- copy the line with the tab you want to duplicate
  + with closed fold, to take the files in it
- paste it where you want
- open the fold of the new tab
- modify the filename in it to match the file you want to edit
  + you can even use `<C-x><C-f>` to use vim file completion
- apply your changes with |:write|

------------------------------------------------------------------------------
SEARCH AND REPLACE		    *wheel-examples-search-replace*

Let's say you want to refactory some shell scripts, and replace
`old_var_name` by `new_var_name`.

The first thing to do is to create a group that contains all of your
scripts. To do that, first create a torus named e.g. `quickfix`. Then,
|:cd| to the root directory of your scripts and add all the script files
with `<M-w>*`. The routine will ask you the glob pattern ; you can type
`**/*.sh` if all your scripts have the same `sh` extension. After that,
you will be asked if you want to create a new circle. Answer yes, and
call this circle `shell`.

Now that you have your group ready, you can start the search with
`<M-w><M-g>`. It will open the grep dedicated buffer in edit mode. You
are now in a buffer where you can edit and propagate your changes. So,
we use the classic `:%s/old_var_name/new_var_name/g` to replace all the
occurences of the old var name. Then, just |:write| the buffer to apply
these changes to all your shell scripts.

Want to go back to previous state ? You can undo your substitution in
the dedicated buffer, and write again.

You can of course reuse the `shell` group for later refactoring.

------------------------------------------------------------------------------
LIST ALL TAG OF A KIND				*wheel-examples-tag-kind*

- launch the tag navigator with `<M-w>t`
- type `i` to go to insert mode
- enter `\<f\>` to keep only functions tags
  + or `\<m\>` to keep only maps tags
  + ...

==============================================================================
FILES							*wheel-files*

Autoload files~

Here is a list of files in `autoload/wheel/`, and a brief description
of the modules within them.

| File              | Description                              |
| ----------------- | --------------------------------------   |
| attic.vim         | Most Recently Used files                 |
| boomerang.vim     | Context menus                            |
| centre.vim        | Commands & mappings                      |
| chain.vim         | List helpers                             |
| checknfix.vim     | Check & fix variables                    |
| clipper.vim       | Yank buffers                             |
| codex.vim         | Yank wheel                               |
| complete.vim      | Completion functions                     |
| crystal.vim       | Internal variables                       |
| cuboctahedron.vim | Reshaping : reorder, reorganize          |
| cylinder.vim      | Dedicated buffers stack                  |
| delta.vim         | Undo & diff                              |
| disc.vim          | Read & write wheel file                  |
| gear.vim          | Generic helpers                          |
| group.vim         | Auto grouping                            |
| helix.vim         | Indexes                                  |
| hub.vim           | Menus                                    |
| kyusu.vim         | Line filters for dedicated buffers       |
| layer.vim         | Layers stack for dedicated buffers       |
| line.vim          | Activate line                            |
| loop.vim          | Loops on mandala lines                   |
| mandala.vim       | Generic dedicated buffers                |
| matrix.vim        | Nested lists & dictionaries              |
| mosaic.vim        | Windows & tabs Layouts                   |
| origami.vim       | Mandala folding                          |
| pencil.vim        | Selection in dedicated buffers           |
| pendulum.vim      | History                                  |
| perspective.vim   | Content generators for dedicated buffers |
| projection.vim    | Find wheel location of current buffer    |
| pyramid.vim       | Mix of tabs & splits layouts             |
| rectangle.vim     | Windows & buffers                        |
| referen.vim       | References to current elements           |
| ripple.vim        | Async job for vim                        |
| sailing.vim       | Dedicated buffers for navigation         |
| scroll.vim        | Input history                            |
| shape.vim         | Dedicated buffers to reshape the wheel   |
| spiral.vim        | Golden ratio                             |
| status.vim        | Print wheel status                       |
| symbol.vim        | Tags                                     |
| tower.vim         | Menu layer in dedicated buffers          |
| tree.vim          | Add, rename, delete elements             |
| vector.vim        | Batch operations                         |
| void.vim          | Initiaze & reset variables               |
| vortex.vim        | Navigation in the wheel                  |
| wave.vim          | Async job for neovim                     |

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
