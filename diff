diff --git a/autoload/wheel/attic.vim b/autoload/wheel/attic.vim
index 17b3c57f..d14fecbb 100644
--- a/autoload/wheel/attic.vim
+++ b/autoload/wheel/attic.vim
@@ -6,10 +6,11 @@
 
 " ---- script constants
 
-if ! exists('s:is_mandala_file')
-	let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
-	lockvar s:is_mandala_file
+if exists('s:is_mandala_file')
+	unlockvar s:is_mandala_file
 endif
+let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
+lockvar s:is_mandala_file
 
 " ---- helpers
 
diff --git a/autoload/wheel/book.vim b/autoload/wheel/book.vim
index 4900637b..fa342f10 100644
--- a/autoload/wheel/book.vim
+++ b/autoload/wheel/book.vim
@@ -10,35 +10,41 @@
 
 " ---- script constants
 
-if ! exists('s:mandala_options')
-	let s:mandala_options = wheel#crystal#fetch('mandala/options')
-	lockvar s:mandala_options
+if exists('s:mandala_options')
+	unlockvar s:mandala_options
 endif
+let s:mandala_options = wheel#crystal#fetch('mandala/options')
+lockvar s:mandala_options
 
-if ! exists('s:map_keys')
-	let s:map_keys = wheel#crystal#fetch('map/keys')
-	lockvar s:map_keys
+if exists('s:map_keys')
+	unlockvar s:map_keys
 endif
+let s:map_keys = wheel#crystal#fetch('map/keys')
+lockvar s:map_keys
 
-if ! exists('s:mandala_autocmds_group')
-	let s:mandala_autocmds_group = wheel#crystal#fetch('mandala/autocmds/group')
-	lockvar s:mandala_autocmds_group
+if exists('s:mandala_autocmds_group')
+	unlockvar s:mandala_autocmds_group
 endif
+let s:mandala_autocmds_group = wheel#crystal#fetch('mandala/autocmds/group')
+lockvar s:mandala_autocmds_group
 
-if ! exists('s:mandala_autocmds_events')
-	let s:mandala_autocmds_events = wheel#crystal#fetch('mandala/autocmds/events')
-	lockvar s:mandala_autocmds_events
+if exists('s:mandala_autocmds_events')
+	unlockvar s:mandala_autocmds_events
 endif
+let s:mandala_autocmds_events = wheel#crystal#fetch('mandala/autocmds/events')
+lockvar s:mandala_autocmds_events
 
-if ! exists('s:mandala_vars')
-	let s:mandala_vars = wheel#crystal#fetch('mandala/vars')
-	lockvar s:mandala_vars
+if exists('s:mandala_vars')
+	unlockvar s:mandala_vars
 endif
+let s:mandala_vars = wheel#crystal#fetch('mandala/vars')
+lockvar s:mandala_vars
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
 " ---- helpers
 
diff --git a/autoload/wheel/boomerang.vim b/autoload/wheel/boomerang.vim
index b142a3c8..9cb45a60 100644
--- a/autoload/wheel/boomerang.vim
+++ b/autoload/wheel/boomerang.vim
@@ -7,15 +7,17 @@
 
 " Script constants
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
-if ! exists('s:mandala_targets')
-	let s:mandala_targets = wheel#crystal#fetch('mandala/targets')
-	lockvar s:mandala_targets
+if exists('s:mandala_targets')
+	unlockvar s:mandala_targets
 endif
+let s:mandala_targets = wheel#crystal#fetch('mandala/targets')
+lockvar s:mandala_targets
 
 " ---- helpers
 
diff --git a/autoload/wheel/centre.vim b/autoload/wheel/centre.vim
index e089eeba..caedb1a8 100644
--- a/autoload/wheel/centre.vim
+++ b/autoload/wheel/centre.vim
@@ -6,60 +6,71 @@
 
 " ---- script constants
 
-if ! exists('s:subcommands_actions')
-	let s:subcommands_actions = wheel#diadem#fetch('command/meta/actions')
-	lockvar s:subcommands_actions
+if exists('s:subcommands_actions')
+	unlockvar s:subcommands_actions
 endif
+let s:subcommands_actions = wheel#diadem#fetch('command/meta/actions')
+lockvar s:subcommands_actions
 
-if ! exists('s:prompt_actions')
-	let s:prompt_actions = wheel#diadem#fetch('command/meta/prompt/actions')
-	lockvar s:prompt_actions
+if exists('s:prompt_actions')
+	unlockvar s:prompt_actions
 endif
+let s:prompt_actions = wheel#diadem#fetch('command/meta/prompt/actions')
+lockvar s:prompt_actions
 
-if ! exists('s:dedibuf_actions')
-	let s:dedibuf_actions = wheel#diadem#fetch('command/meta/dedibuf/actions')
-	lockvar s:dedibuf_actions
+if exists('s:dedibuf_actions')
+	unlockvar s:dedibuf_actions
 endif
+let s:dedibuf_actions = wheel#diadem#fetch('command/meta/dedibuf/actions')
+lockvar s:dedibuf_actions
 
-if ! exists('s:normal_plugs')
-	let s:normal_plugs = wheel#geode#fetch('plugs/normal')
-	lockvar s:normal_plugs
+if exists('s:normal_plugs')
+	unlockvar s:normal_plugs
 endif
+let s:normal_plugs = wheel#geode#fetch('plugs/normal')
+lockvar s:normal_plugs
 
-if ! exists('s:visual_plugs')
-	let s:visual_plugs = wheel#geode#fetch('plugs/visual')
-	lockvar s:visual_plugs
+if exists('s:visual_plugs')
+	unlockvar s:visual_plugs
 endif
+let s:visual_plugs = wheel#geode#fetch('plugs/visual')
+lockvar s:visual_plugs
 
-if ! exists('s:expr_plugs')
-	let s:expr_plugs = wheel#geode#fetch('plugs/expr')
-	lockvar s:expr_plugs
+if exists('s:expr_plugs')
+	unlockvar s:expr_plugs
 endif
+let s:expr_plugs = wheel#geode#fetch('plugs/expr')
+lockvar s:expr_plugs
 
-if ! exists('s:level_0_normal_maps')
-	let s:level_0_normal_maps = wheel#geode#fetch('maps/level_0/normal')
-	lockvar s:level_0_normal_maps
+if exists('s:level_0_normal_maps')
+	unlockvar s:level_0_normal_maps
 endif
+let s:level_0_normal_maps = wheel#geode#fetch('maps/level_0/normal')
+lockvar s:level_0_normal_maps
 
-if ! exists('s:level_1_normal_maps')
-	let s:level_1_normal_maps = wheel#geode#fetch('maps/level_1/normal')
-	lockvar s:level_1_normal_maps
+if exists('s:level_1_normal_maps')
+	unlockvar s:level_1_normal_maps
 endif
+let s:level_1_normal_maps = wheel#geode#fetch('maps/level_1/normal')
+lockvar s:level_1_normal_maps
 
-if ! exists('s:level_2_normal_maps')
-	let s:level_2_normal_maps = wheel#geode#fetch('maps/level_2/normal')
-	lockvar s:level_2_normal_maps
+if exists('s:level_2_normal_maps')
+	unlockvar s:level_2_normal_maps
 endif
+let s:level_2_normal_maps = wheel#geode#fetch('maps/level_2/normal')
+lockvar s:level_2_normal_maps
 
-if ! exists('s:level_2_visual_maps')
-	let s:level_2_visual_maps = wheel#geode#fetch('maps/level_2/visual')
-	lockvar s:level_2_visual_maps
+if exists('s:level_2_visual_maps')
+	unlockvar s:level_2_visual_maps
 endif
+let s:level_2_visual_maps = wheel#geode#fetch('maps/level_2/visual')
+lockvar s:level_2_visual_maps
 
-if ! exists('s:level_20_normal_maps')
-	let s:level_20_normal_maps = wheel#geode#fetch('maps/level_20/normal')
-	lockvar s:level_20_normal_maps
+if exists('s:level_20_normal_maps')
+	unlockvar s:level_20_normal_maps
 endif
+let s:level_20_normal_maps = wheel#geode#fetch('maps/level_20/normal')
+lockvar s:level_20_normal_maps
 
 " ---- commands
 
diff --git a/autoload/wheel/chakra.vim b/autoload/wheel/chakra.vim
index 293a36e9..ae301d5e 100644
--- a/autoload/wheel/chakra.vim
+++ b/autoload/wheel/chakra.vim
@@ -6,30 +6,35 @@
 
 " ---- script constants
 
-if ! exists('s:sign_name')
-	let s:sign_name = wheel#crystal#fetch('sign/name')
-	lockvar s:sign_name
+if exists('s:sign_name')
+	unlockvar s:sign_name
 endif
+let s:sign_name = wheel#crystal#fetch('sign/name')
+lockvar s:sign_name
 
-if ! exists('s:sign_native_name')
-	let s:sign_native_name = wheel#crystal#fetch('sign/name/native')
-	lockvar s:sign_native_name
+if exists('s:sign_native_name')
+	unlockvar s:sign_native_name
 endif
+let s:sign_native_name = wheel#crystal#fetch('sign/name/native')
+lockvar s:sign_native_name
 
-if ! exists('s:sign_group')
-	let s:sign_group = wheel#crystal#fetch('sign/group')
-	lockvar s:sign_group
+if exists('s:sign_group')
+	unlockvar s:sign_group
 endif
+let s:sign_group = wheel#crystal#fetch('sign/group')
+lockvar s:sign_group
 
-if ! exists('s:sign_native_group')
-	let s:sign_native_group = wheel#crystal#fetch('sign/group/native')
-	lockvar s:sign_native_group
+if exists('s:sign_native_group')
+	unlockvar s:sign_native_group
 endif
+let s:sign_native_group = wheel#crystal#fetch('sign/group/native')
+lockvar s:sign_native_group
 
-if ! exists('s:level_separ')
-	let s:level_separ = wheel#crystal#fetch('separator/level')
-	lockvar s:level_separ
+if exists('s:level_separ')
+	unlockvar s:level_separ
 endif
+let s:level_separ = wheel#crystal#fetch('separator/level')
+lockvar s:level_separ
 
 " ---- booleans
 
diff --git a/autoload/wheel/clipper.vim b/autoload/wheel/clipper.vim
index 14f94292..bdc1c3c9 100644
--- a/autoload/wheel/clipper.vim
+++ b/autoload/wheel/clipper.vim
@@ -6,10 +6,11 @@
 
 " ---- script constants
 
-if ! exists('s:registers_symbols')
-	let s:registers_symbols = wheel#crystal#fetch('registers-symbols')
-	lockvar s:registers_symbols
+if exists('s:registers_symbols')
+	unlockvar s:registers_symbols
 endif
+let s:registers_symbols = wheel#crystal#fetch('registers-symbols')
+lockvar s:registers_symbols
 
 " ---- functions
 
diff --git a/autoload/wheel/codex.vim b/autoload/wheel/codex.vim
index 7a699a02..d572bf6b 100644
--- a/autoload/wheel/codex.vim
+++ b/autoload/wheel/codex.vim
@@ -15,10 +15,11 @@
 
 " ---- script constants
 
-if ! exists('s:registers_symbols')
-	let s:registers_symbols = wheel#crystal#fetch('registers-symbols')
-	lockvar s:registers_symbols
+if exists('s:registers_symbols')
+	unlockvar s:registers_symbols
 endif
+let s:registers_symbols = wheel#crystal#fetch('registers-symbols')
+lockvar s:registers_symbols
 
 " ---- helpers
 
diff --git a/autoload/wheel/complete.vim b/autoload/wheel/complete.vim
index 21ac05cc..481c2481 100644
--- a/autoload/wheel/complete.vim
+++ b/autoload/wheel/complete.vim
@@ -15,35 +15,41 @@
 
 " ---- script constants
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
-if ! exists('s:registers_symbols')
-	let s:registers_symbols = wheel#crystal#fetch('registers-symbols')
-	lockvar s:registers_symbols
+if exists('s:registers_symbols')
+	unlockvar s:registers_symbols
 endif
+let s:registers_symbols = wheel#crystal#fetch('registers-symbols')
+lockvar s:registers_symbols
 
-if ! exists('s:subcommands_actions')
-	let s:subcommands_actions = wheel#diadem#fetch('command/meta/actions')
-	lockvar s:subcommands_actions
+if exists('s:subcommands_actions')
+	unlockvar s:subcommands_actions
 endif
+let s:subcommands_actions = wheel#diadem#fetch('command/meta/actions')
+lockvar s:subcommands_actions
 
-if ! exists('s:prompt_actions')
-	let s:prompt_actions = wheel#diadem#fetch('command/meta/prompt/actions')
-	lockvar s:prompt_actions
+if exists('s:prompt_actions')
+	unlockvar s:prompt_actions
 endif
+let s:prompt_actions = wheel#diadem#fetch('command/meta/prompt/actions')
+lockvar s:prompt_actions
 
-if ! exists('s:dedibuf_actions')
-	let s:dedibuf_actions = wheel#diadem#fetch('command/meta/dedibuf/actions')
-	lockvar s:dedibuf_actions
+if exists('s:dedibuf_actions')
+	unlockvar s:dedibuf_actions
 endif
+let s:dedibuf_actions = wheel#diadem#fetch('command/meta/dedibuf/actions')
+lockvar s:dedibuf_actions
 
-if ! exists('s:file_subcommands')
-	let s:file_subcommands = wheel#diadem#fetch('command/meta/subcommands/file')
-	lockvar s:file_subcommands
+if exists('s:file_subcommands')
+	unlockvar s:file_subcommands
 endif
+let s:file_subcommands = wheel#diadem#fetch('command/meta/subcommands/file')
+lockvar s:file_subcommands
 
 " ---- empty
 
diff --git a/autoload/wheel/counterpoint.vim b/autoload/wheel/counterpoint.vim
index f1e572a1..d00d3376 100644
--- a/autoload/wheel/counterpoint.vim
+++ b/autoload/wheel/counterpoint.vim
@@ -7,21 +7,24 @@
 
 " ---- script constants
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
-if ! exists('s:fold_markers')
-	let s:fold_markers = wheel#crystal#fetch('fold/markers')
-	let s:fold_markers = join(s:fold_markers, ',')
-	lockvar s:fold_markers
+if exists('s:fold_markers')
+	unlockvar s:fold_markers
 endif
+let s:fold_markers = wheel#crystal#fetch('fold/markers')
+let s:fold_markers = join(s:fold_markers, ',')
+lockvar s:fold_markers
 
-if ! exists('s:fold_1')
-	let s:fold_1 = wheel#crystal#fetch('fold/one')
-	lockvar s:fold_1
+if exists('s:fold_1')
+	unlockvar s:fold_1
 endif
+let s:fold_1 = wheel#crystal#fetch('fold/one')
+lockvar s:fold_1
 
 " ---- grep edit
 
diff --git a/autoload/wheel/curve.vim b/autoload/wheel/curve.vim
index 12b74650..483af146 100644
--- a/autoload/wheel/curve.vim
+++ b/autoload/wheel/curve.vim
@@ -12,15 +12,17 @@
 
 " ---- script constants
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
-if ! exists('s:level_separ')
-	let s:level_separ = wheel#crystal#fetch('separator/level')
-	lockvar s:level_separ
+if exists('s:level_separ')
+	unlockvar s:level_separ
 endif
+let s:level_separ = wheel#crystal#fetch('separator/level')
+lockvar s:level_separ
 
 " -- applications
 
diff --git a/autoload/wheel/cylinder.vim b/autoload/wheel/cylinder.vim
index 248cbbc5..b1a25048 100644
--- a/autoload/wheel/cylinder.vim
+++ b/autoload/wheel/cylinder.vim
@@ -10,15 +10,17 @@
 
 " ---- script constants
 
-if ! exists('s:is_mandala_file')
-	let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
-	lockvar s:is_mandala_file
+if exists('s:is_mandala_file')
+	unlockvar s:is_mandala_file
 endif
+let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
+lockvar s:is_mandala_file
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
 " ---- helpers
 
diff --git a/autoload/wheel/flower.vim b/autoload/wheel/flower.vim
index 8b74f0e1..26c24119 100644
--- a/autoload/wheel/flower.vim
+++ b/autoload/wheel/flower.vim
@@ -14,25 +14,29 @@
 
 " ---- script constants
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
-if ! exists('s:level_separ')
-	let s:level_separ = wheel#crystal#fetch('separator/level')
-	lockvar s:level_separ
+if exists('s:level_separ')
+	unlockvar s:level_separ
 endif
+let s:level_separ = wheel#crystal#fetch('separator/level')
+lockvar s:level_separ
 
-if ! exists('s:fold_1')
-	let s:fold_1 = wheel#crystal#fetch('fold/one')
-	lockvar s:fold_1
+if exists('s:fold_1')
+	unlockvar s:fold_1
 endif
+let s:fold_1 = wheel#crystal#fetch('fold/one')
+lockvar s:fold_1
 
-if ! exists('s:fold_2')
-	let s:fold_2 = wheel#crystal#fetch('fold/two')
-	lockvar s:fold_2
+if exists('s:fold_2')
+	unlockvar s:fold_2
 endif
+let s:fold_2 = wheel#crystal#fetch('fold/two')
+lockvar s:fold_2
 
 " ---- helpers
 
diff --git a/autoload/wheel/guru.vim b/autoload/wheel/guru.vim
index 5a7ea1d7..914d50df 100644
--- a/autoload/wheel/guru.vim
+++ b/autoload/wheel/guru.vim
@@ -6,25 +6,29 @@
 
 " ---- script constants
 
-if ! exists('s:subcommands_actions')
-	let s:subcommands_actions = wheel#diadem#fetch('command/meta/actions')
-	lockvar s:subcommands_actions
+if exists('s:subcommands_actions')
+	unlockvar s:subcommands_actions
 endif
+let s:subcommands_actions = wheel#diadem#fetch('command/meta/actions')
+lockvar s:subcommands_actions
 
-if ! exists('s:prompt_actions')
-	let s:prompt_actions = wheel#diadem#fetch('command/meta/prompt/actions')
-	lockvar s:prompt_actions
+if exists('s:prompt_actions')
+	unlockvar s:prompt_actions
 endif
+let s:prompt_actions = wheel#diadem#fetch('command/meta/prompt/actions')
+lockvar s:prompt_actions
 
-if ! exists('s:dedibuf_actions')
-	let s:dedibuf_actions = wheel#diadem#fetch('command/meta/dedibuf/actions')
-	lockvar s:dedibuf_actions
+if exists('s:dedibuf_actions')
+	unlockvar s:dedibuf_actions
 endif
+let s:dedibuf_actions = wheel#diadem#fetch('command/meta/dedibuf/actions')
+lockvar s:dedibuf_actions
 
-if ! exists('s:file_subcommands')
-	let s:file_subcommands = wheel#diadem#fetch('command/meta/subcommands/file')
-	lockvar s:file_subcommands
+if exists('s:file_subcommands')
+	unlockvar s:file_subcommands
 endif
+let s:file_subcommands = wheel#diadem#fetch('command/meta/subcommands/file')
+lockvar s:file_subcommands
 
 " ---- help helpers
 
diff --git a/autoload/wheel/harmony.vim b/autoload/wheel/harmony.vim
index 54e94bd9..58cfa176 100644
--- a/autoload/wheel/harmony.vim
+++ b/autoload/wheel/harmony.vim
@@ -7,31 +7,36 @@
 
 " ---- script constants
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
-if ! exists('s:level_separ')
-	let s:level_separ = wheel#crystal#fetch('separator/level')
-	lockvar s:level_separ
+if exists('s:level_separ')
+	unlockvar s:level_separ
 endif
+let s:level_separ = wheel#crystal#fetch('separator/level')
+lockvar s:level_separ
 
-if ! exists('s:fold_markers')
-	let s:fold_markers = wheel#crystal#fetch('fold/markers')
-	let s:fold_markers = join(s:fold_markers, ',')
-	lockvar s:fold_markers
+if exists('s:fold_markers')
+	unlockvar s:fold_markers
 endif
+let s:fold_markers = wheel#crystal#fetch('fold/markers')
+let s:fold_markers = join(s:fold_markers, ',')
+lockvar s:fold_markers
 
-if ! exists('s:fold_1')
-	let s:fold_1 = wheel#crystal#fetch('fold/one')
-	lockvar s:fold_1
+if exists('s:fold_1')
+	unlockvar s:fold_1
 endif
+let s:fold_1 = wheel#crystal#fetch('fold/one')
+lockvar s:fold_1
 
-if ! exists('s:fold_2')
-	let s:fold_2 = wheel#crystal#fetch('fold/two')
-	lockvar s:fold_2
+if exists('s:fold_2')
+	unlockvar s:fold_2
 endif
+let s:fold_2 = wheel#crystal#fetch('fold/two')
+lockvar s:fold_2
 
 " ---- wheel elements
 
diff --git a/autoload/wheel/helm.vim b/autoload/wheel/helm.vim
index 9145d2dd..30159935 100644
--- a/autoload/wheel/helm.vim
+++ b/autoload/wheel/helm.vim
@@ -6,21 +6,24 @@
 
 " ---- script constants
 
-if ! exists('s:fold_markers')
-	let s:fold_markers = wheel#crystal#fetch('fold/markers')
-	let s:fold_markers = join(s:fold_markers, ',')
-	lockvar s:fold_markers
+if exists('s:fold_markers')
+	unlockvar s:fold_markers
 endif
+let s:fold_markers = wheel#crystal#fetch('fold/markers')
+let s:fold_markers = join(s:fold_markers, ',')
+lockvar s:fold_markers
 
-if ! exists('s:fold_1')
-	let s:fold_1 = wheel#crystal#fetch('fold/one')
-	lockvar s:fold_1
+if exists('s:fold_1')
+	unlockvar s:fold_1
 endif
+let s:fold_1 = wheel#crystal#fetch('fold/one')
+lockvar s:fold_1
 
-if ! exists('s:menu_list')
-	let s:menu_list = wheel#quartz#fetch('menu/list')
-	lockvar s:menu_list
+if exists('s:menu_list')
+	unlockvar s:menu_list
 endif
+let s:menu_list = wheel#quartz#fetch('menu/list')
+lockvar s:menu_list
 
 " ---- booleans
 
diff --git a/autoload/wheel/kintsugi.vim b/autoload/wheel/kintsugi.vim
index 7961530f..28bab477 100644
--- a/autoload/wheel/kintsugi.vim
+++ b/autoload/wheel/kintsugi.vim
@@ -10,10 +10,11 @@
 
 " ---- script constants
 
-if ! exists('s:mandala_vars')
-	let s:mandala_vars = wheel#crystal#fetch('mandala/vars')
-	lockvar s:mandala_vars
+if exists('s:mandala_vars')
+	unlockvar s:mandala_vars
 endif
+let s:mandala_vars = wheel#crystal#fetch('mandala/vars')
+lockvar s:mandala_vars
 
 " ---- checks
 
diff --git a/autoload/wheel/kyusu.vim b/autoload/wheel/kyusu.vim
index 7fa8a66b..66bc4a00 100644
--- a/autoload/wheel/kyusu.vim
+++ b/autoload/wheel/kyusu.vim
@@ -14,15 +14,17 @@
 
 " ---- script constants
 
-if ! exists('s:fold_pattern')
-	let s:fold_pattern = wheel#crystal#fetch('fold/pattern')
-	lockvar s:fold_pattern
+if exists('s:fold_pattern')
+	unlockvar s:fold_pattern
 endif
+let s:fold_pattern = wheel#crystal#fetch('fold/pattern')
+lockvar s:fold_pattern
 
-if ! exists('s:unused')
-	let s:unused = 0
-	lockvar s:unused
+if exists('s:unused')
+	unlockvar s:unused
 endif
+let s:unused = 0
+lockvar s:unused
 
 " ---- helpers
 
diff --git a/autoload/wheel/line.vim b/autoload/wheel/line.vim
index b77ae3dc..0663c82b 100644
--- a/autoload/wheel/line.vim
+++ b/autoload/wheel/line.vim
@@ -12,10 +12,11 @@
 
 " ---- script constants
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
 " ---- buffers, tabs, wins
 
diff --git a/autoload/wheel/loop.vim b/autoload/wheel/loop.vim
index cdf1e88a..def536b1 100644
--- a/autoload/wheel/loop.vim
+++ b/autoload/wheel/loop.vim
@@ -6,10 +6,11 @@
 
 " ---- script constants
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
 " ---- navigation
 
diff --git a/autoload/wheel/mandala.vim b/autoload/wheel/mandala.vim
index a5bcb4fc..b4fadb35 100644
--- a/autoload/wheel/mandala.vim
+++ b/autoload/wheel/mandala.vim
@@ -14,30 +14,35 @@
 
 " ---- script constants
 
-if ! exists('s:map_keys')
-	let s:map_keys = wheel#crystal#fetch('map/keys')
-	lockvar s:map_keys
+if exists('s:map_keys')
+	unlockvar s:map_keys
 endif
+let s:map_keys = wheel#crystal#fetch('map/keys')
+lockvar s:map_keys
 
-if ! exists('s:mandala_autocmds_group')
-	let s:mandala_autocmds_group = wheel#crystal#fetch('mandala/autocmds/group')
-	lockvar s:mandala_autocmds_group
+if exists('s:mandala_autocmds_group')
+	unlockvar s:mandala_autocmds_group
 endif
+let s:mandala_autocmds_group = wheel#crystal#fetch('mandala/autocmds/group')
+lockvar s:mandala_autocmds_group
 
-if ! exists('s:mandala_autocmds_events')
-	let s:mandala_autocmds_events = wheel#crystal#fetch('mandala/autocmds/events')
-	lockvar s:mandala_autocmds_events
+if exists('s:mandala_autocmds_events')
+	unlockvar s:mandala_autocmds_events
 endif
+let s:mandala_autocmds_events = wheel#crystal#fetch('mandala/autocmds/events')
+lockvar s:mandala_autocmds_events
 
-if ! exists('s:mandala_vars')
-	let s:mandala_vars = wheel#crystal#fetch('mandala/vars')
-	lockvar s:mandala_vars
+if exists('s:mandala_vars')
+	unlockvar s:mandala_vars
 endif
+let s:mandala_vars = wheel#crystal#fetch('mandala/vars')
+lockvar s:mandala_vars
 
-if ! exists('s:is_mandala_file')
-	let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
-	lockvar s:is_mandala_file
+if exists('s:is_mandala_file')
+	unlockvar s:is_mandala_file
 endif
+let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
+lockvar s:is_mandala_file
 
 " ---- init
 
diff --git a/autoload/wheel/mosaic.vim b/autoload/wheel/mosaic.vim
index 8cc66238..23cd1ae5 100644
--- a/autoload/wheel/mosaic.vim
+++ b/autoload/wheel/mosaic.vim
@@ -4,7 +4,6 @@
 "
 " Tabs & windows layouts
 
-
 " ---- helpers
 
 fun! wheel#mosaic#one_tab ()
diff --git a/autoload/wheel/origami.vim b/autoload/wheel/origami.vim
index d75d31e6..c098ea05 100644
--- a/autoload/wheel/origami.vim
+++ b/autoload/wheel/origami.vim
@@ -6,11 +6,12 @@
 
 " ---- script constants
 
-if ! exists('s:fold_markers')
-	let s:fold_markers = wheel#crystal#fetch('fold/markers')
-	let s:fold_markers = join(s:fold_markers, ',')
-	lockvar s:fold_markers
+if exists('s:fold_markers')
+	unlockvar s:fold_markers
 endif
+let s:fold_markers = wheel#crystal#fetch('fold/markers')
+let s:fold_markers = join(s:fold_markers, ',')
+lockvar s:fold_markers
 
 " ---- helpers
 
diff --git a/autoload/wheel/ouroboros.vim b/autoload/wheel/ouroboros.vim
index 95cff5b7..66b335e7 100644
--- a/autoload/wheel/ouroboros.vim
+++ b/autoload/wheel/ouroboros.vim
@@ -12,15 +12,17 @@
 
 " ---- script constants
 
-if ! exists('s:modes_letters')
-	let s:modes_letters = wheel#crystal#fetch('modes-letters')
-	lockvar s:modes_letters
+if exists('s:modes_letters')
+	unlockvar s:modes_letters
 endif
+let s:modes_letters = wheel#crystal#fetch('modes-letters')
+lockvar s:modes_letters
 
-if ! exists('s:letters_modes')
-	let s:letters_modes = wheel#crystal#fetch('letters-modes')
-	lockvar s:letters_modes
+if exists('s:letters_modes')
+	unlockvar s:letters_modes
 endif
+let s:letters_modes = wheel#crystal#fetch('letters-modes')
+lockvar s:letters_modes
 
 " ---- map modes
 
diff --git a/autoload/wheel/perspective.vim b/autoload/wheel/perspective.vim
index 396f2982..7988b7ad 100644
--- a/autoload/wheel/perspective.vim
+++ b/autoload/wheel/perspective.vim
@@ -11,25 +11,29 @@
 
 " ---- script constants
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
-if ! exists('s:fold_1')
-	let s:fold_1 = wheel#crystal#fetch('fold/one')
-	lockvar s:fold_1
+if exists('s:fold_1')
+	unlockvar s:fold_1
 endif
+let s:fold_1 = wheel#crystal#fetch('fold/one')
+lockvar s:fold_1
 
-if ! exists('s:is_mandala_file')
-	let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
-	lockvar s:is_mandala_file
+if exists('s:is_mandala_file')
+	unlockvar s:is_mandala_file
 endif
+let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
+lockvar s:is_mandala_file
 
-if ! exists('s:registers_symbols')
-	let s:registers_symbols = wheel#crystal#fetch('registers-symbols')
-	lockvar s:registers_symbols
+if exists('s:registers_symbols')
+	unlockvar s:registers_symbols
 endif
+let s:registers_symbols = wheel#crystal#fetch('registers-symbols')
+lockvar s:registers_symbols
 
 " ---- buffers
 
diff --git a/autoload/wheel/polyphony.vim b/autoload/wheel/polyphony.vim
index 62b1f25b..577efe22 100644
--- a/autoload/wheel/polyphony.vim
+++ b/autoload/wheel/polyphony.vim
@@ -8,25 +8,29 @@
 
 " ---- script constants
 
-if ! exists('s:wheel_write_functions')
-	let s:wheel_write_functions = wheel#crystal#fetch('function/write/wheel')
-	lockvar s:wheel_write_functions
+if exists('s:wheel_write_functions')
+	unlockvar s:wheel_write_functions
 endif
+let s:wheel_write_functions = wheel#crystal#fetch('function/write/wheel')
+lockvar s:wheel_write_functions
 
-if ! exists('s:mandala_autocmds_group')
-	let s:mandala_autocmds_group = wheel#crystal#fetch('mandala/autocmds/group')
-	lockvar s:mandala_autocmds_group
+if exists('s:mandala_autocmds_group')
+	unlockvar s:mandala_autocmds_group
 endif
+let s:mandala_autocmds_group = wheel#crystal#fetch('mandala/autocmds/group')
+lockvar s:mandala_autocmds_group
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
-if ! exists('s:field_separ_bar')
-	let s:field_separ_bar = wheel#crystal#fetch('separator/field/bar')
-	lockvar s:field_separ_bar
+if exists('s:field_separ_bar')
+	unlockvar s:field_separ_bar
 endif
+let s:field_separ_bar = wheel#crystal#fetch('separator/field/bar')
+lockvar s:field_separ_bar
 
 " ---- booleans
 
diff --git a/autoload/wheel/projection.vim b/autoload/wheel/projection.vim
index 6ad50f42..7d061e61 100644
--- a/autoload/wheel/projection.vim
+++ b/autoload/wheel/projection.vim
@@ -6,10 +6,11 @@
 
 " ---- scripts constants
 
-if ! exists('s:level_separ')
-	let s:level_separ = wheel#crystal#fetch('separator/level')
-	lockvar s:level_separ
+if exists('s:level_separ')
+	unlockvar s:level_separ
 endif
+let s:level_separ = wheel#crystal#fetch('separator/level')
+lockvar s:level_separ
 
 " ---- projection
 
diff --git a/autoload/wheel/quartz.vim b/autoload/wheel/quartz.vim
index 25db8860..7c080394 100644
--- a/autoload/wheel/quartz.vim
+++ b/autoload/wheel/quartz.vim
@@ -11,384 +11,413 @@
 
 " ---- submenus
 
-if ! exists('s:menu_help')
-	let s:menu_help = [
-				\ ['inline help', 'wheel#guru#help'],
-				\ ['current prefix mappings', 'wheel#guru#mappings'],
-				\ ['available mappings (plugs)', 'wheel#guru#plugs'],
-				\ ['meta command and subcommands', 'wheel#guru#meta_command'],
-				\ ['autocommands', 'wheel#guru#autocommands'],
-				\ ['dedicated buffer help', 'wheel#guru#mandala'],
-				\ ['local maps', 'wheel#guru#mandala_mappings'],
-				\ ]
-	lockvar! s:menu_help
+if exists('s:menu_help')
+	unlockvar! s:menu_help
 endif
-
-if ! exists('s:menu_status')
-	let s:menu_status = [
-				\ ['dashboard', 'wheel#status#dashboard'],
-				\ ['jump to current wheel location', 'wheel#vortex#jump'],
-				\ ['find closest wheel location to cursor', 'wheel#projection#follow'],
-				\ ]
-	lockvar! s:menu_status
+let s:menu_help = [
+			\ ['inline help', 'wheel#guru#help'],
+			\ ['current prefix mappings', 'wheel#guru#mappings'],
+			\ ['available mappings (plugs)', 'wheel#guru#plugs'],
+			\ ['meta command and subcommands', 'wheel#guru#meta_command'],
+			\ ['autocommands', 'wheel#guru#autocommands'],
+			\ ['dedicated buffer help', 'wheel#guru#mandala'],
+			\ ['local maps', 'wheel#guru#mandala_mappings'],
+			\ ]
+lockvar! s:menu_help
+
+if exists('s:menu_status')
+	unlockvar! s:menu_status
 endif
-
-if ! exists('s:menu_save_and_load')
-	let s:menu_save_and_load = [
-				\ ['save wheel', 'wheel#disc#write_wheel'],
-				\ ['load wheel', 'wheel#disc#read_wheel'],
-				\ ['save session', 'wheel#disc#write_session'],
-				\ ['load session', 'wheel#disc#read_session'],
-				\ ]
-	lockvar! s:menu_save_and_load
+let s:menu_status = [
+			\ ['dashboard', 'wheel#status#dashboard'],
+			\ ['jump to current wheel location', 'wheel#vortex#jump'],
+			\ ['find closest wheel location to cursor', 'wheel#projection#follow'],
+			\ ]
+lockvar! s:menu_status
+
+if exists('s:menu_save_and_load')
+	unlockvar! s:menu_save_and_load
 endif
-
-if ! exists('s:menu_wheel_navigation')
-	let s:menu_wheel_navigation = [
-				\ ['previous location' ,  "wheel#vortex#previous('location')"],
-				\ ['next location' ,  "wheel#vortex#next('location')"],
-				\ ['previous circle' ,  "wheel#vortex#previous('circle')"],
-				\ ['next circle' ,  "wheel#vortex#next('circle')"],
-				\ ['previous torus' ,  "wheel#vortex#previous('torus')"],
-				\ ['next torus' ,  "wheel#vortex#next('torus')"],
-				\ ['go to torus' ,  "wheel#whirl#switch('torus')"],
-				\ ['go to circle' ,  "wheel#whirl#switch('circle')"],
-				\ ['go to location' ,  "wheel#whirl#switch('location')"],
-				\ ['go to location in index' ,  'wheel#whirl#helix'],
-				\ ['go to circle in index' ,  'wheel#whirl#grid'],
-				\ ['go to element in wheel tree' ,  'wheel#whirl#tree'],
-				\ ['newer location in history' ,  'wheel#waterclock#newer'],
-				\ ['older location in history' ,  'wheel#waterclock#older'],
-				\ ['newer location in same circle' ,  "wheel#waterclock#newer('circle')"],
-				\ ['older location in same circle' ,  "wheel#waterclock#older('circle')"],
-				\ ['newer location in same torus' ,  "wheel#waterclock#newer('torus')"],
-				\ ['older location in same torus' ,  "wheel#waterclock#older('torus')"],
-				\ ['alternate anywhere' ,  "wheel#caduceus#alternate('anywhere')"],
-				\ ['alternate in same torus' ,  "wheel#caduceus#alternate('same_torus')"],
-				\ ['alternate in same circle' ,  "wheel#caduceus#alternate('same_circle')"],
-				\ ['alternate in other torus' ,  "wheel#caduceus#alternate('other_torus')"],
-				\ ['alternate in other circle' ,  "wheel#caduceus#alternate('other_circle')"],
-				\ ['alternate in same torus, other circle' ,  "wheel#caduceus#alternate('same_torus_other_circle')"],
-				\ ['go to location in history' ,  'wheel#whirl#history'],
-				\ ['go to location in frecency' ,  'wheel#whirl#frecency'],
-				\ ]
-	lockvar! s:menu_wheel_navigation
+let s:menu_save_and_load = [
+			\ ['save wheel', 'wheel#disc#write_wheel'],
+			\ ['load wheel', 'wheel#disc#read_wheel'],
+			\ ['save session', 'wheel#disc#write_session'],
+			\ ['load session', 'wheel#disc#read_session'],
+			\ ]
+lockvar! s:menu_save_and_load
+
+if exists('s:menu_wheel_navigation')
+	unlockvar! s:menu_wheel_navigation
 endif
-
-if ! exists('s:menu_native_navigation')
-	let s:menu_native_navigation = [
-				\ ['go to buffer' ,  'wheel#frigate#buffer'],
-				\ ['go to buffer (include unlisted)' ,  "wheel#frigate#buffer('all')"],
-				\ ['go to tab & window' ,  'wheel#frigate#tabwin'],
-				\ ['go to tab & window (fold tree mode)' ,  'wheel#frigate#tabwin_tree'],
-				\ ['go to marker' ,  'wheel#frigate#marker()'],
-				\ ['go to jump' ,  'wheel#frigate#jump()'],
-				\ ['go to change' ,  'wheel#frigate#change()'],
-				\ ['go to tag' ,  'wheel#frigate#tag()'],
-				\ ]
-	lockvar! s:menu_native_navigation
+let s:menu_wheel_navigation = [
+			\ ['previous location' ,  "wheel#vortex#previous('location')"],
+			\ ['next location' ,  "wheel#vortex#next('location')"],
+			\ ['previous circle' ,  "wheel#vortex#previous('circle')"],
+			\ ['next circle' ,  "wheel#vortex#next('circle')"],
+			\ ['previous torus' ,  "wheel#vortex#previous('torus')"],
+			\ ['next torus' ,  "wheel#vortex#next('torus')"],
+			\ ['go to torus' ,  "wheel#whirl#switch('torus')"],
+			\ ['go to circle' ,  "wheel#whirl#switch('circle')"],
+			\ ['go to location' ,  "wheel#whirl#switch('location')"],
+			\ ['go to location in index' ,  'wheel#whirl#helix'],
+			\ ['go to circle in index' ,  'wheel#whirl#grid'],
+			\ ['go to element in wheel tree' ,  'wheel#whirl#tree'],
+			\ ['newer location in history' ,  'wheel#waterclock#newer'],
+			\ ['older location in history' ,  'wheel#waterclock#older'],
+			\ ['newer location in same circle' ,  "wheel#waterclock#newer('circle')"],
+			\ ['older location in same circle' ,  "wheel#waterclock#older('circle')"],
+			\ ['newer location in same torus' ,  "wheel#waterclock#newer('torus')"],
+			\ ['older location in same torus' ,  "wheel#waterclock#older('torus')"],
+			\ ['alternate anywhere' ,  "wheel#caduceus#alternate('anywhere')"],
+			\ ['alternate in same torus' ,  "wheel#caduceus#alternate('same_torus')"],
+			\ ['alternate in same circle' ,  "wheel#caduceus#alternate('same_circle')"],
+			\ ['alternate in other torus' ,  "wheel#caduceus#alternate('other_torus')"],
+			\ ['alternate in other circle' ,  "wheel#caduceus#alternate('other_circle')"],
+			\ ['alternate in same torus, other circle' ,  "wheel#caduceus#alternate('same_torus_other_circle')"],
+			\ ['go to location in history' ,  'wheel#whirl#history'],
+			\ ['go to location in frecency' ,  'wheel#whirl#frecency'],
+			\ ]
+lockvar! s:menu_wheel_navigation
+
+if exists('s:menu_native_navigation')
+	unlockvar! s:menu_native_navigation
 endif
-
-if ! exists('s:menu_organize_wheel')
-	let s:menu_organize_wheel = [
-				\ ['add a new torus' ,  'wheel#tree#add_torus'],
-				\ ['add a new circle' ,  'wheel#tree#add_circle'],
-				\ ['add new location at cursor' ,  'wheel#tree#add_here'],
-				\ ['add a new file' ,  'wheel#tree#add_file'],
-				\ ['add a new buffer' ,  'wheel#tree#add_buffer'],
-				\ ['add files matching glob' ,  'wheel#tree#add_glob'],
-				\ ['reorder toruses' ,  "wheel#yggdrasil#reorder('torus')"],
-				\ ['reorder circles' ,  "wheel#yggdrasil#reorder('circle')"],
-				\ ['reorder locations' ,  "wheel#yggdrasil#reorder('location')"],
-				\ ['rename torus' ,  "wheel#tree#rename('torus')"],
-				\ ['rename circle' ,  "wheel#tree#rename('circle')"],
-				\ ['rename location' ,  "wheel#tree#rename('location')"],
-				\ ['rename file & location' ,  'wheel#tree#rename_file'],
-				\ ['rename toruses' ,  "wheel#yggdrasil#rename('torus')"],
-				\ ['rename circles' ,  "wheel#yggdrasil#rename('circle')"],
-				\ ['rename locations' ,  "wheel#yggdrasil#rename('location')"],
-				\ ['rename locations & filenames' ,  'wheel#yggdrasil#rename_file'],
-				\ ['delete torus' ,  "wheel#tree#delete('torus')"],
-				\ ['delete circle' ,  "wheel#tree#delete('circle')"],
-				\ ['delete location' ,  "wheel#tree#delete('location')"],
-				\ ['move circle' ,  "wheel#tree#move('circle')"],
-				\ ['move location' ,  "wheel#tree#move('location')"],
-				\ ['copy torus' ,  "wheel#tree#copy('torus')"],
-				\ ['copy circle' ,  "wheel#tree#copy('circle')"],
-				\ ['copy location' ,  "wheel#tree#copy('location')"],
-				\ ['copy or move toruses' ,  "wheel#yggdrasil#copy_move('torus')"],
-				\ ['copy or move circles' ,  "wheel#yggdrasil#copy_move('circle')"],
-				\ ['copy or move locations' ,  "wheel#yggdrasil#copy_move('location')"],
-				\ ['reorganize wheel' ,  'wheel#yggdrasil#reorganize'],
-				\ ]
-	lockvar! s:menu_organize_wheel
+let s:menu_native_navigation = [
+			\ ['go to buffer' ,  'wheel#frigate#buffer'],
+			\ ['go to buffer (include unlisted)' ,  "wheel#frigate#buffer('all')"],
+			\ ['go to tab & window' ,  'wheel#frigate#tabwin'],
+			\ ['go to tab & window (fold tree mode)' ,  'wheel#frigate#tabwin_tree'],
+			\ ['go to marker' ,  'wheel#frigate#marker()'],
+			\ ['go to jump' ,  'wheel#frigate#jump()'],
+			\ ['go to change' ,  'wheel#frigate#change()'],
+			\ ['go to tag' ,  'wheel#frigate#tag()'],
+			\ ]
+lockvar! s:menu_native_navigation
+
+if exists('s:menu_organize_wheel')
+	unlockvar! s:menu_organize_wheel
 endif
-
-if ! exists('s:menu_organize_native')
-	let s:menu_organize_native = [
-				\ ['reorganize tabs & windows' ,  'wheel#mirror#reorg_tabwin'],
-				\ ]
-	lockvar! s:menu_organize_native
+let s:menu_organize_wheel = [
+			\ ['add a new torus' ,  'wheel#tree#add_torus'],
+			\ ['add a new circle' ,  'wheel#tree#add_circle'],
+			\ ['add new location at cursor' ,  'wheel#tree#add_here'],
+			\ ['add a new file' ,  'wheel#tree#add_file'],
+			\ ['add a new buffer' ,  'wheel#tree#add_buffer'],
+			\ ['add files matching glob' ,  'wheel#tree#add_glob'],
+			\ ['reorder toruses' ,  "wheel#yggdrasil#reorder('torus')"],
+			\ ['reorder circles' ,  "wheel#yggdrasil#reorder('circle')"],
+			\ ['reorder locations' ,  "wheel#yggdrasil#reorder('location')"],
+			\ ['rename torus' ,  "wheel#tree#rename('torus')"],
+			\ ['rename circle' ,  "wheel#tree#rename('circle')"],
+			\ ['rename location' ,  "wheel#tree#rename('location')"],
+			\ ['rename file & location' ,  'wheel#tree#rename_file'],
+			\ ['rename toruses' ,  "wheel#yggdrasil#rename('torus')"],
+			\ ['rename circles' ,  "wheel#yggdrasil#rename('circle')"],
+			\ ['rename locations' ,  "wheel#yggdrasil#rename('location')"],
+			\ ['rename locations & filenames' ,  'wheel#yggdrasil#rename_file'],
+			\ ['delete torus' ,  "wheel#tree#delete('torus')"],
+			\ ['delete circle' ,  "wheel#tree#delete('circle')"],
+			\ ['delete location' ,  "wheel#tree#delete('location')"],
+			\ ['move circle' ,  "wheel#tree#move('circle')"],
+			\ ['move location' ,  "wheel#tree#move('location')"],
+			\ ['copy torus' ,  "wheel#tree#copy('torus')"],
+			\ ['copy circle' ,  "wheel#tree#copy('circle')"],
+			\ ['copy location' ,  "wheel#tree#copy('location')"],
+			\ ['copy or move toruses' ,  "wheel#yggdrasil#copy_move('torus')"],
+			\ ['copy or move circles' ,  "wheel#yggdrasil#copy_move('circle')"],
+			\ ['copy or move locations' ,  "wheel#yggdrasil#copy_move('location')"],
+			\ ['reorganize wheel' ,  'wheel#yggdrasil#reorganize'],
+			\ ]
+lockvar! s:menu_organize_wheel
+
+if exists('s:menu_organize_native')
+	unlockvar! s:menu_organize_native
 endif
+let s:menu_organize_native = [
+			\ ['reorganize tabs & windows' ,  'wheel#mirror#reorg_tabwin'],
+			\ ]
+lockvar! s:menu_organize_native
 
-if ! exists('s:menu_refactoring')
-	let s:menu_refactoring = [
-				\ ['grep in edit mode' ,  'wheel#shadow#grep_edit'],
-				\ ['narrow current file' ,  'wheel#shadow#narrow_file'],
-				\ ['narrow all files in circle' ,  'wheel#shadow#narrow_circle'],
-				\ ]
-	lockvar! s:menu_refactoring
+if exists('s:menu_refactoring')
+	unlockvar! s:menu_refactoring
 endif
-
-if ! exists('s:menu_search_file')
-	let s:menu_search_file = [
-				\ ['go to most recently used file (mru)' ,  'wheel#frigate#mru'],
-				\ ['go to locate result' ,  'wheel#frigate#locate'],
-				\ ['go to find result' ,  'wheel#frigate#find'],
-				\ ['go to async find result' ,  'wheel#frigate#async_find'],
-				\ ]
-	lockvar! s:menu_search_file
+let s:menu_refactoring = [
+			\ ['grep in edit mode' ,  'wheel#shadow#grep_edit'],
+			\ ['narrow current file' ,  'wheel#shadow#narrow_file'],
+			\ ['narrow all files in circle' ,  'wheel#shadow#narrow_circle'],
+			\ ]
+lockvar! s:menu_refactoring
+
+if exists('s:menu_search_file')
+	unlockvar! s:menu_search_file
 endif
-
-if ! exists('s:menu_search_inside_file')
-	let s:menu_search_inside_file = [
-				\ ['go to matching line (occur)' ,  'wheel#frigate#occur'],
-				\ ['go to grep result' ,  'wheel#frigate#grep()'],
-				\ ['go to outline result' ,  'wheel#frigate#outline()'],
-				\ ]
-	lockvar! s:menu_search_inside_file
+let s:menu_search_file = [
+			\ ['go to most recently used file (mru)' ,  'wheel#frigate#mru'],
+			\ ['go to locate result' ,  'wheel#frigate#locate'],
+			\ ['go to find result' ,  'wheel#frigate#find'],
+			\ ['go to async find result' ,  'wheel#frigate#async_find'],
+			\ ]
+lockvar! s:menu_search_file
+
+if exists('s:menu_search_inside_file')
+	unlockvar! s:menu_search_inside_file
 endif
-
-if ! exists('s:menu_yank')
-	let s:menu_yank = [
-				\ ['yank wheel in list mode' ,  "wheel#clipper#yank('list')"],
-				\ ['yank wheel in plain mode' ,  "wheel#clipper#yank('plain')"],
-				\ ]
-	lockvar! s:menu_yank
+let s:menu_search_inside_file = [
+			\ ['go to matching line (occur)' ,  'wheel#frigate#occur'],
+			\ ['go to grep result' ,  'wheel#frigate#grep()'],
+			\ ['go to outline result' ,  'wheel#frigate#outline()'],
+			\ ]
+lockvar! s:menu_search_inside_file
+
+if exists('s:menu_yank')
+	unlockvar! s:menu_yank
 endif
-
-if ! exists('s:menu_undo')
-	let s:menu_undo = [
-				\ ['undo list' ,  'wheel#triangle#undolist'],
-				\ ]
-	lockvar! s:menu_undo
+let s:menu_yank = [
+			\ ['yank wheel in list mode' ,  "wheel#clipper#yank('list')"],
+			\ ['yank wheel in plain mode' ,  "wheel#clipper#yank('plain')"],
+			\ ]
+lockvar! s:menu_yank
+
+if exists('s:menu_undo')
+	unlockvar! s:menu_undo
 endif
+let s:menu_undo = [
+			\ ['undo list' ,  'wheel#triangle#undolist'],
+			\ ]
+lockvar! s:menu_undo
 
-if ! exists('s:menu_command')
-	let s:menu_command = [
-				\ [':ex or !shell command output', 'wheel#mandala#command'],
-				\ ['async shell command output' ,  'wheel#mandala#async'],
-				\ ]
-	lockvar! s:menu_command
+if exists('s:menu_command')
+	unlockvar! s:menu_command
 endif
-
-if ! exists('s:menu_dedicated_buffers')
-	let s:menu_dedicated_buffers = [
-				\ ['add new dedicated buffer', 'wheel#cylinder#add()'],
-				\ ['delete current dedicated buffer', 'wheel#cylinder#add()'],
-				\ ['switch dedicated buffer', 'wheel#cylinder#switch()'],
-				\ ]
-	lockvar! s:menu_dedicated_buffers
+let s:menu_command = [
+			\ [':ex or !shell command output', 'wheel#mandala#command'],
+			\ ['async shell command output' ,  'wheel#mandala#async'],
+			\ ]
+lockvar! s:menu_command
+
+if exists('s:menu_dedicated_buffers')
+	unlockvar! s:menu_dedicated_buffers
 endif
-
-if ! exists('s:menu_layout')
-	let s:menu_layout = [
-				\ ['zoom ,  one tab, one window', 'wheel#mosaic#zoom()'],
-				\ ['rotate windows clockwise' ,  'wheel#mosaic#rotate_clockwise()'],
-				\ ['rotate windows counter-clockwise' ,  'wheel#mosaic#rotate_counter_clockwise()'],
-				\ ]
-	lockvar! s:menu_layout
+let s:menu_dedicated_buffers = [
+			\ ['add new dedicated buffer', 'wheel#cylinder#add()'],
+			\ ['delete current dedicated buffer', 'wheel#cylinder#add()'],
+			\ ['switch dedicated buffer', 'wheel#cylinder#switch()'],
+			\ ]
+lockvar! s:menu_dedicated_buffers
+
+if exists('s:menu_layout')
+	unlockvar! s:menu_layout
 endif
-
-if ! exists('s:menu_layout_tabs')
-	let s:menu_layout_tabs = [
-				\ ['toruses on tabs' ,  "wheel#mosaic#tabs('torus')"],
-				\ ['circles on tabs' ,  "wheel#mosaic#tabs('circle')"],
-				\ ['locations on tabs' ,  "wheel#mosaic#tabs('location')"],
-				\ ]
-	lockvar! s:menu_layout_tabs
+let s:menu_layout = [
+			\ ['zoom ,  one tab, one window', 'wheel#mosaic#zoom()'],
+			\ ['rotate windows clockwise' ,  'wheel#mosaic#rotate_clockwise()'],
+			\ ['rotate windows counter-clockwise' ,  'wheel#mosaic#rotate_counter_clockwise()'],
+			\ ]
+lockvar! s:menu_layout
+
+if exists('s:menu_layout_tabs')
+	unlockvar! s:menu_layout_tabs
 endif
-
-if ! exists('s:menu_layout_windows')
-	let s:menu_layout_windows = [
-				\ ['toruses on horizontal splits' ,  "wheel#mosaic#split('torus')"],
-				\ ['circles on horizontal splits' ,  "wheel#mosaic#split('circle')"],
-				\ ['locations on horizontal splits' ,  "wheel#mosaic#split('location')"],
-				\ ['toruses on vertical splits' ,  "wheel#mosaic#split('torus', 'vertical')"],
-				\ ['circles on vertical splits' ,  "wheel#mosaic#split('circle', 'vertical')"],
-				\ ['locations on vertical splits' ,  "wheel#mosaic#split('location', 'vertical')"],
-				\ ['toruses on splits, main top layout' ,  "wheel#mosaic#split('torus', 'main_top')"],
-				\ ['circles on splits, main top layout' ,  "wheel#mosaic#split('circle', 'main_top')"],
-				\ ['locations on splits, main top layout' ,  "wheel#mosaic#split('location', 'main_top')"],
-				\ ['toruses on splits, main left layout' ,  "wheel#mosaic#split('torus', 'main_left')"],
-				\ ['circles on splits, main left layout' ,  "wheel#mosaic#split('circle', 'main_left')"],
-				\ ['locations on splits, main left layout' ,  "wheel#mosaic#split('location', 'main_left')"],
-				\ ['toruses on splits, grid layout' ,  "wheel#mosaic#split_grid('torus')"],
-				\ ['circles on splits, grid layout' ,  "wheel#mosaic#split_grid('circle')"],
-				\ ['locations on splits, grid layout' ,  "wheel#mosaic#split_grid('location')"],
-				\ ['toruses on splits, transposed grid layout' ,  "wheel#mosaic#split_transposed_grid('torus')"],
-				\ ['circles on splits, transposed grid layout' ,  "wheel#mosaic#split_transposed_grid('circle')"],
-				\ ['locations on splits, transposed grid layout' ,  "wheel#mosaic#split_transposed_grid('location')"],
-				\ ['toruses on splits, golden horizontal' ,  "wheel#mosaic#golden('torus', 'horizontal')"],
-				\ ['circles on splits, golden horizontal' ,  "wheel#mosaic#golden('circle', 'horizontal')"],
-				\ ['locations on splits, golden horizontal' ,  "wheel#mosaic#golden('location', 'horizontal')"],
-				\ ['toruses on splits, golden vertical' ,  "wheel#mosaic#golden('torus', 'vertical')"],
-				\ ['circles on splits, golden vertical' ,  "wheel#mosaic#golden('circle', 'vertical')"],
-				\ ['locations on splits, golden vertical' ,  "wheel#mosaic#golden('location', 'vertical')"],
-				\ ['toruses on splits, golden left layout' ,  "wheel#mosaic#golden('torus', 'main_left')"],
-				\ ['circles on splits, golden left layout' ,  "wheel#mosaic#golden('circle', 'main_left')"],
-				\ ['locations on splits, golden left layout' ,  "wheel#mosaic#golden('location', 'main_left')"],
-				\ ['toruses on splits, golden top layout' ,  "wheel#mosaic#golden('torus', 'main_top')"],
-				\ ['circles on splits, golden top layout' ,  "wheel#mosaic#golden('circle', 'main_top')"],
-				\ ['locations on splits, golden top layout' ,  "wheel#mosaic#golden('location', 'main_top')"],
-				\ ]
-	lockvar! s:menu_layout_windows
+let s:menu_layout_tabs = [
+			\ ['toruses on tabs' ,  "wheel#mosaic#tabs('torus')"],
+			\ ['circles on tabs' ,  "wheel#mosaic#tabs('circle')"],
+			\ ['locations on tabs' ,  "wheel#mosaic#tabs('location')"],
+			\ ]
+lockvar! s:menu_layout_tabs
+
+if exists('s:menu_layout_windows')
+	unlockvar! s:menu_layout_windows
 endif
-
-if ! exists('s:menu_layout_mixed')
-	let s:menu_layout_mixed = [
-				\ ['mix : toruses on tabs & circles on splits', "wheel#pyramid#steps('torus')"],
-				\ ['mix : circles on tabs & locations on splits', "wheel#pyramid#steps('circle')"],
-				\ ]
-	lockvar! s:menu_layout_mixed
+let s:menu_layout_windows = [
+			\ ['toruses on horizontal splits' ,  "wheel#mosaic#split('torus')"],
+			\ ['circles on horizontal splits' ,  "wheel#mosaic#split('circle')"],
+			\ ['locations on horizontal splits' ,  "wheel#mosaic#split('location')"],
+			\ ['toruses on vertical splits' ,  "wheel#mosaic#split('torus', 'vertical')"],
+			\ ['circles on vertical splits' ,  "wheel#mosaic#split('circle', 'vertical')"],
+			\ ['locations on vertical splits' ,  "wheel#mosaic#split('location', 'vertical')"],
+			\ ['toruses on splits, main top layout' ,  "wheel#mosaic#split('torus', 'main_top')"],
+			\ ['circles on splits, main top layout' ,  "wheel#mosaic#split('circle', 'main_top')"],
+			\ ['locations on splits, main top layout' ,  "wheel#mosaic#split('location', 'main_top')"],
+			\ ['toruses on splits, main left layout' ,  "wheel#mosaic#split('torus', 'main_left')"],
+			\ ['circles on splits, main left layout' ,  "wheel#mosaic#split('circle', 'main_left')"],
+			\ ['locations on splits, main left layout' ,  "wheel#mosaic#split('location', 'main_left')"],
+			\ ['toruses on splits, grid layout' ,  "wheel#mosaic#split_grid('torus')"],
+			\ ['circles on splits, grid layout' ,  "wheel#mosaic#split_grid('circle')"],
+			\ ['locations on splits, grid layout' ,  "wheel#mosaic#split_grid('location')"],
+			\ ['toruses on splits, transposed grid layout' ,  "wheel#mosaic#split_transposed_grid('torus')"],
+			\ ['circles on splits, transposed grid layout' ,  "wheel#mosaic#split_transposed_grid('circle')"],
+			\ ['locations on splits, transposed grid layout' ,  "wheel#mosaic#split_transposed_grid('location')"],
+			\ ['toruses on splits, golden horizontal' ,  "wheel#mosaic#golden('torus', 'horizontal')"],
+			\ ['circles on splits, golden horizontal' ,  "wheel#mosaic#golden('circle', 'horizontal')"],
+			\ ['locations on splits, golden horizontal' ,  "wheel#mosaic#golden('location', 'horizontal')"],
+			\ ['toruses on splits, golden vertical' ,  "wheel#mosaic#golden('torus', 'vertical')"],
+			\ ['circles on splits, golden vertical' ,  "wheel#mosaic#golden('circle', 'vertical')"],
+			\ ['locations on splits, golden vertical' ,  "wheel#mosaic#golden('location', 'vertical')"],
+			\ ['toruses on splits, golden left layout' ,  "wheel#mosaic#golden('torus', 'main_left')"],
+			\ ['circles on splits, golden left layout' ,  "wheel#mosaic#golden('circle', 'main_left')"],
+			\ ['locations on splits, golden left layout' ,  "wheel#mosaic#golden('location', 'main_left')"],
+			\ ['toruses on splits, golden top layout' ,  "wheel#mosaic#golden('torus', 'main_top')"],
+			\ ['circles on splits, golden top layout' ,  "wheel#mosaic#golden('circle', 'main_top')"],
+			\ ['locations on splits, golden top layout' ,  "wheel#mosaic#golden('location', 'main_top')"],
+			\ ]
+lockvar! s:menu_layout_windows
+
+if exists('s:menu_layout_mixed')
+	unlockvar! s:menu_layout_mixed
 endif
+let s:menu_layout_mixed = [
+			\ ['mix : toruses on tabs & circles on splits', "wheel#pyramid#steps('torus')"],
+			\ ['mix : circles on tabs & locations on splits', "wheel#pyramid#steps('circle')"],
+			\ ]
+lockvar! s:menu_layout_mixed
 
 " ---- list of submenus variables
 
-if ! exists('s:menu_list')
-	let s:menu_list = [
-				\ 'help',
-				\ 'status',
-				\ 'save and load',
-				\ 'wheel navigation',
-				\ 'native navigation',
-				\ 'organize wheel',
-				\ 'organize native',
-				\ 'refactoring',
-				\ 'search file',
-				\ 'search inside file',
-				\ 'yank',
-				\ 'undo',
-				\ 'command',
-				\ 'layout',
-				\ 'layout_tabs',
-				\ 'layout_windows',
-				\ 'layout_mixed',
-				\ ]
-	lockvar! s:menu_list
+if exists('s:menu_list')
+	unlockvar! s:menu_list
 endif
+let s:menu_list = [
+			\ 'help',
+			\ 'status',
+			\ 'save and load',
+			\ 'wheel navigation',
+			\ 'native navigation',
+			\ 'organize wheel',
+			\ 'organize native',
+			\ 'refactoring',
+			\ 'search file',
+			\ 'search inside file',
+			\ 'yank',
+			\ 'undo',
+			\ 'command',
+			\ 'layout',
+			\ 'layout_tabs',
+			\ 'layout_windows',
+			\ 'layout_mixed',
+			\ ]
+lockvar! s:menu_list
 
 " ---- main menu
 
-if ! exists('s:menu_main')
-	let s:menu_main = []
-	for name in s:menu_list
-		let s:formated = substitute(name, ' ', '_', 'g')
-		eval s:menu_main->extend(s:menu_{s:formated})
-	endfor
-	lockvar! s:menu_main
+if exists('s:menu_main')
+	unlockvar! s:menu_main
 endif
+let s:menu_main = []
+for name in s:menu_list
+	let s:formated = substitute(name, ' ', '_', 'g')
+	eval s:menu_main->extend(s:menu_{s:formated})
+endfor
+lockvar! s:menu_main
 
 " ---- meta menu
 
-if ! exists('s:menu_meta')
-	let s:menu_meta = []
-	for name in s:menu_list
-		let s:formated = substitute(name, ' ', '_', 'g')
-		let s:function = 'wheel#helm#submenu(' .. string(s:formated) .. ')'
-		eval s:menu_meta->add([name, s:function])
-	endfor
-	lockvar! s:menu_meta
+if exists('s:menu_meta')
+	unlockvar! s:menu_meta
 endif
+let s:menu_meta = []
+for name in s:menu_list
+	let s:formated = substitute(name, ' ', '_', 'g')
+	let s:function = 'wheel#helm#submenu(' .. string(s:formated) .. ')'
+	eval s:menu_meta->add([name, s:function])
+endfor
+lockvar! s:menu_meta
 
 " ---- contextual menus
 
-if ! exists('s:context_navigation')
-	let s:context_navigation = [
-				\ ['open' ,  "wheel#boomerang#navigation('here')"],
-				\ ['open in tab(s)' ,  "wheel#boomerang#navigation('tab')"],
-				\ ['open in horizontal split(s)' ,  "wheel#boomerang#navigation('horizontal_split')"],
-				\ ['open in vertical split(s)' ,  "wheel#boomerang#navigation('vertical_split')"],
-				\ ['open in horizontal golden split(s)' ,  "wheel#boomerang#navigation('horizontal_golden')"],
-				\ ['open in vertical golden split(s)' ,  "wheel#boomerang#navigation('vertical_golden')"],
-				\ ]
-	lockvar! s:context_navigation
+if exists('s:context_navigation')
+	unlockvar! s:context_navigation
 endif
-
-if ! exists('s:context_buffer')
-	let s:context_buffer = s:context_navigation + [
-				\ ['delete' ,  "wheel#boomerang#buffer('delete')"],
-				\ ['unload' ,  "wheel#boomerang#buffer('unload')"],
-				\ ['wipe' ,  "wheel#boomerang#buffer('wipe')"],
-				\ ['delete hidden buffers' ,  "wheel#boomerang#buffer('delete_hidden')"],
-				\ ['wipe hidden buffers' ,  "wheel#boomerang#buffer('wipe_hidden')"],
-				\ ]
-	lockvar! s:context_buffer
+let s:context_navigation = [
+			\ ['open' ,  "wheel#boomerang#navigation('here')"],
+			\ ['open in tab(s)' ,  "wheel#boomerang#navigation('tab')"],
+			\ ['open in horizontal split(s)' ,  "wheel#boomerang#navigation('horizontal_split')"],
+			\ ['open in vertical split(s)' ,  "wheel#boomerang#navigation('vertical_split')"],
+			\ ['open in horizontal golden split(s)' ,  "wheel#boomerang#navigation('horizontal_golden')"],
+			\ ['open in vertical golden split(s)' ,  "wheel#boomerang#navigation('vertical_golden')"],
+			\ ]
+lockvar! s:context_navigation
+
+if exists('s:context_buffer')
+	unlockvar! s:context_buffer
 endif
-
-if ! exists('s:context_buffer_all')
-	let s:context_buffer_all = s:context_navigation + [
-				\ ['delete' ,  "wheel#boomerang#buffer('delete')"],
-				\ ['unload' ,  "wheel#boomerang#buffer('unload')"],
-				\ ['wipe' ,  "wheel#boomerang#buffer('wipe')"],
-				\ ['delete hidden buffers' ,  "wheel#boomerang#buffer('delete_hidden')"],
-				\ ['wipe hidden buffers' ,  "wheel#boomerang#buffer('wipe_hidden')"],
-				\ ['wipe all hidden buffers, including unlisted ones' ,  "wheel#boomerang#buffer('wipe_all_hidden')"],
-				\ ]
-	lockvar! s:context_buffer_all
+let s:context_buffer = s:context_navigation + [
+			\ ['delete' ,  "wheel#boomerang#buffer('delete')"],
+			\ ['unload' ,  "wheel#boomerang#buffer('unload')"],
+			\ ['wipe' ,  "wheel#boomerang#buffer('wipe')"],
+			\ ['delete hidden buffers' ,  "wheel#boomerang#buffer('delete_hidden')"],
+			\ ['wipe hidden buffers' ,  "wheel#boomerang#buffer('wipe_hidden')"],
+			\ ]
+lockvar! s:context_buffer
+
+if exists('s:context_buffer_all')
+	unlockvar! s:context_buffer_all
 endif
-
-if ! exists('s:context_tabwin')
-	let s:context_tabwin = [
-				\ ['open' ,  "wheel#boomerang#tabwin('open')"],
-				\ ['new tab' ,  "wheel#boomerang#tabwin('tabnew')"],
-				\ ['close tab' ,  "wheel#boomerang#tabwin('tabclose')"],
-				\ ['reorganize' ,  'wheel#mirror#reorg_tabwin'],
-				\ ]
-	lockvar! s:context_tabwin
+let s:context_buffer_all = s:context_navigation + [
+			\ ['delete' ,  "wheel#boomerang#buffer('delete')"],
+			\ ['unload' ,  "wheel#boomerang#buffer('unload')"],
+			\ ['wipe' ,  "wheel#boomerang#buffer('wipe')"],
+			\ ['delete hidden buffers' ,  "wheel#boomerang#buffer('delete_hidden')"],
+			\ ['wipe hidden buffers' ,  "wheel#boomerang#buffer('wipe_hidden')"],
+			\ ['wipe all hidden buffers, including unlisted ones' ,  "wheel#boomerang#buffer('wipe_all_hidden')"],
+			\ ]
+lockvar! s:context_buffer_all
+
+if exists('s:context_tabwin')
+	unlockvar! s:context_tabwin
 endif
-
-if ! exists('s:context_tabwin_tree')
-	let s:context_tabwin_tree = [
-				\ ['open' ,  "wheel#boomerang#tabwin_tree('open')"],
-				\ ['new tab' ,  "wheel#boomerang#tabwin_tree('tabnew')"],
-				\ ['close tab' ,  "wheel#boomerang#tabwin_tree('tabclose')"],
-				\ ['reorganize' ,  'wheel#mirror#reorg_tabwin'],
-				\ ]
-	lockvar! s:context_tabwin_tree
+let s:context_tabwin = [
+			\ ['open' ,  "wheel#boomerang#tabwin('open')"],
+			\ ['new tab' ,  "wheel#boomerang#tabwin('tabnew')"],
+			\ ['close tab' ,  "wheel#boomerang#tabwin('tabclose')"],
+			\ ['reorganize' ,  'wheel#mirror#reorg_tabwin'],
+			\ ]
+lockvar! s:context_tabwin
+
+if exists('s:context_tabwin_tree')
+	unlockvar! s:context_tabwin_tree
 endif
-
-if ! exists('s:context_grep')
-	let s:context_grep = s:context_navigation + [
-				\ ['edit mode' ,  "wheel#shadow#grep_edit()"],
-				\ ['open quickfix' ,  "wheel#boomerang#grep('quickfix')"],
-				\ ]
-	lockvar! s:context_grep
+let s:context_tabwin_tree = [
+			\ ['open' ,  "wheel#boomerang#tabwin_tree('open')"],
+			\ ['new tab' ,  "wheel#boomerang#tabwin_tree('tabnew')"],
+			\ ['close tab' ,  "wheel#boomerang#tabwin_tree('tabclose')"],
+			\ ['reorganize' ,  'wheel#mirror#reorg_tabwin'],
+			\ ]
+lockvar! s:context_tabwin_tree
+
+if exists('s:context_grep')
+	unlockvar! s:context_grep
 endif
-
-if ! exists('s:context_yank_list')
-	let s:context_yank_list = [
-				\ ['linewise paste before' ,  "wheel#boomerang#yank('linewise-before')"],
-				\ ['linewise paste after' ,  "wheel#boomerang#yank('linewise-after')"],
-				\ ['characterwise paste before' ,  "wheel#boomerang#yank('charwise-before')"],
-				\ ['characterwise paste after' ,  "wheel#boomerang#yank('charwise-after')"],
-				\ ['undo' ,  'wheel#codex#undo()'],
-				\ ['redo' ,  'wheel#codex#redo()'],
-				\ ]
-	lockvar! s:context_yank_list
+let s:context_grep = s:context_navigation + [
+			\ ['edit mode' ,  "wheel#shadow#grep_edit()"],
+			\ ['open quickfix' ,  "wheel#boomerang#grep('quickfix')"],
+			\ ]
+lockvar! s:context_grep
+
+if exists('s:context_yank_list')
+	unlockvar! s:context_yank_list
 endif
-
-if ! exists('s:context_yank_plain')
-	let s:context_yank_plain = [
-				\ ['linewise paste before' ,  "wheel#boomerang#yank('linewise-before')"],
-				\ ['linewise paste after' ,  "wheel#boomerang#yank('linewise-after')"],
-				\ ['characterwise paste before' ,  "wheel#boomerang#yank('charwise-before')"],
-				\ ['characterwise paste after' ,  "wheel#boomerang#yank('charwise-after')"],
-				\ ['undo' ,  'wheel#codex#undo()'],
-				\ ['redo' ,  'wheel#codex#redo()'],
-				\ ]
-	lockvar! s:context_yank_plain
+let s:context_yank_list = [
+			\ ['linewise paste before' ,  "wheel#boomerang#yank('linewise-before')"],
+			\ ['linewise paste after' ,  "wheel#boomerang#yank('linewise-after')"],
+			\ ['characterwise paste before' ,  "wheel#boomerang#yank('charwise-before')"],
+			\ ['characterwise paste after' ,  "wheel#boomerang#yank('charwise-after')"],
+			\ ['undo' ,  'wheel#codex#undo()'],
+			\ ['redo' ,  'wheel#codex#redo()'],
+			\ ]
+lockvar! s:context_yank_list
+
+if exists('s:context_yank_plain')
+	unlockvar! s:context_yank_plain
 endif
+let s:context_yank_plain = [
+			\ ['linewise paste before' ,  "wheel#boomerang#yank('linewise-before')"],
+			\ ['linewise paste after' ,  "wheel#boomerang#yank('linewise-after')"],
+			\ ['characterwise paste before' ,  "wheel#boomerang#yank('charwise-before')"],
+			\ ['characterwise paste after' ,  "wheel#boomerang#yank('charwise-after')"],
+			\ ['undo' ,  'wheel#codex#undo()'],
+			\ ['redo' ,  'wheel#codex#redo()'],
+			\ ]
+lockvar! s:context_yank_plain
 
 " ---- public interface
 
diff --git a/autoload/wheel/rectangle.vim b/autoload/wheel/rectangle.vim
index ce9edd86..b6b03479 100644
--- a/autoload/wheel/rectangle.vim
+++ b/autoload/wheel/rectangle.vim
@@ -6,20 +6,23 @@
 
 " ---- script constants
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
-if ! exists('s:level_separ')
-	let s:level_separ = wheel#crystal#fetch('separator/level')
-	lockvar s:level_separ
+if exists('s:level_separ')
+	unlockvar s:level_separ
 endif
+let s:level_separ = wheel#crystal#fetch('separator/level')
+lockvar s:level_separ
 
-if ! exists('s:is_mandala_file')
-	let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
-	lockvar s:is_mandala_file
+if exists('s:is_mandala_file')
+	unlockvar s:is_mandala_file
 endif
+let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
+lockvar s:is_mandala_file
 
 " ---- helpers
 
diff --git a/autoload/wheel/referen.vim b/autoload/wheel/referen.vim
index a6274b19..d4b2745f 100644
--- a/autoload/wheel/referen.vim
+++ b/autoload/wheel/referen.vim
@@ -6,20 +6,23 @@
 
 " Script constants
 
-if ! exists('s:levels')
-	let s:levels = wheel#crystal#fetch('referen/levels')
-	lockvar s:levels
+if exists('s:levels')
+	unlockvar s:levels
 endif
+let s:levels = wheel#crystal#fetch('referen/levels')
+lockvar s:levels
 
-if ! exists('s:coordinates_levels')
-	let s:coordinates_levels = wheel#crystal#fetch('referen/coordinates/levels')
-	lockvar s:coordinates_levels
+if exists('s:coordinates_levels')
+	unlockvar s:coordinates_levels
 endif
+let s:coordinates_levels = wheel#crystal#fetch('referen/coordinates/levels')
+lockvar s:coordinates_levels
 
-if ! exists('s:list_keys')
-	let s:list_keys = wheel#crystal#fetch('referen/list_keys')
-	lockvar s:list_keys
+if exists('s:list_keys')
+	unlockvar s:list_keys
 endif
+let s:list_keys = wheel#crystal#fetch('referen/list_keys')
+lockvar s:list_keys
 
 " ---- current elements
 
diff --git a/autoload/wheel/river.vim b/autoload/wheel/river.vim
index 2cbfde2b..0d64f63e 100644
--- a/autoload/wheel/river.vim
+++ b/autoload/wheel/river.vim
@@ -6,10 +6,11 @@
 
 " ---- script constants
 
-if ! exists('s:wheel_content_generators')
-	let s:wheel_content_generators = wheel#crystal#fetch('function/generator/wheel')
-	lockvar s:wheel_content_generators
+if exists('s:wheel_content_generators')
+	unlockvar s:wheel_content_generators
 endif
+let s:wheel_content_generators = wheel#crystal#fetch('function/generator/wheel')
+lockvar s:wheel_content_generators
 
 " ---- default values
 
diff --git a/autoload/wheel/sailing.vim b/autoload/wheel/sailing.vim
index bf8ae280..461cf713 100644
--- a/autoload/wheel/sailing.vim
+++ b/autoload/wheel/sailing.vim
@@ -8,10 +8,11 @@
 
 " ---- script constants
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
 " ---- main
 
diff --git a/autoload/wheel/shadow.vim b/autoload/wheel/shadow.vim
index 55eac605..ba0eb27f 100644
--- a/autoload/wheel/shadow.vim
+++ b/autoload/wheel/shadow.vim
@@ -6,10 +6,11 @@
 
 " script constants
 
-if ! exists('s:is_mandala_file')
-	let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
-	lockvar s:is_mandala_file
+if exists('s:is_mandala_file')
+	unlockvar s:is_mandala_file
 endif
+let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
+lockvar s:is_mandala_file
 
 " ---- grep edit
 
diff --git a/autoload/wheel/spiral.vim b/autoload/wheel/spiral.vim
index c12a04a9..f3d0487c 100644
--- a/autoload/wheel/spiral.vim
+++ b/autoload/wheel/spiral.vim
@@ -6,10 +6,11 @@
 
 " ---- script constants
 
-if ! exists('s:golden')
-	let s:golden = wheel#crystal#fetch('golden-ratio')
-	lockvar s:golden
+if exists('s:golden')
+	unlockvar s:golden
 endif
+let s:golden = wheel#crystal#fetch('golden-ratio')
+lockvar s:golden
 
 " ---- helpers
 
diff --git a/autoload/wheel/status.vim b/autoload/wheel/status.vim
index 189cc722..ae97f9e3 100644
--- a/autoload/wheel/status.vim
+++ b/autoload/wheel/status.vim
@@ -6,20 +6,23 @@
 
 " Script constants
 
-if ! exists('s:is_mandala_file')
-	let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
-	lockvar s:is_mandala_file
+if exists('s:is_mandala_file')
+	unlockvar s:is_mandala_file
 endif
+let s:is_mandala_file = wheel#crystal#fetch('is_mandala_file')
+lockvar s:is_mandala_file
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
-if ! exists('s:level_separ')
-	let s:level_separ = wheel#crystal#fetch('separator/level')
-	lockvar s:level_separ
+if exists('s:level_separ')
+	unlockvar s:level_separ
 endif
+let s:level_separ = wheel#crystal#fetch('separator/level')
+lockvar s:level_separ
 
 " ---- clear cmd line
 
diff --git a/autoload/wheel/tower.vim b/autoload/wheel/tower.vim
index 50bbbdb0..2b3cf618 100644
--- a/autoload/wheel/tower.vim
+++ b/autoload/wheel/tower.vim
@@ -6,20 +6,23 @@
 
 " script constants
 
-if ! exists('s:fun_is_navigation')
-	let s:fun_is_navigation = wheel#crystal#fetch('function/pattern/navigation')
-	lockvar s:fun_is_navigation
+if exists('s:fun_is_navigation')
+	unlockvar s:fun_is_navigation
 endif
+let s:fun_is_navigation = wheel#crystal#fetch('function/pattern/navigation')
+lockvar s:fun_is_navigation
 
-if ! exists('s:fun_opens_mandala')
-	let s:fun_opens_mandala = wheel#crystal#fetch('function/pattern/mandala/opens')
-	lockvar s:fun_opens_mandala
+if exists('s:fun_opens_mandala')
+	unlockvar s:fun_opens_mandala
 endif
+let s:fun_opens_mandala = wheel#crystal#fetch('function/pattern/mandala/opens')
+lockvar s:fun_opens_mandala
 
-if ! exists('s:fun_needs_mandala')
-	let s:fun_needs_mandala = wheel#crystal#fetch('function/pattern/mandala/needs')
-	lockvar s:fun_needs_mandala
+if exists('s:fun_needs_mandala')
+	unlockvar s:fun_needs_mandala
 endif
+let s:fun_needs_mandala = wheel#crystal#fetch('function/pattern/mandala/needs')
+lockvar s:fun_needs_mandala
 
 " ---- booleans
 
diff --git a/autoload/wheel/tree.vim b/autoload/wheel/tree.vim
index 9fdb6ed9..27920d61 100644
--- a/autoload/wheel/tree.vim
+++ b/autoload/wheel/tree.vim
@@ -16,15 +16,17 @@
 
 " ---- script constants
 
-if ! exists('s:level_separ')
-	let s:level_separ = wheel#crystal#fetch('separator/level')
-	lockvar s:level_separ
+if exists('s:level_separ')
+	unlockvar s:level_separ
 endif
+let s:level_separ = wheel#crystal#fetch('separator/level')
+lockvar s:level_separ
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
 " ---- helpers
 
diff --git a/autoload/wheel/vector.vim b/autoload/wheel/vector.vim
index bda967ca..f89ccb2c 100644
--- a/autoload/wheel/vector.vim
+++ b/autoload/wheel/vector.vim
@@ -8,10 +8,11 @@
 
 " ---- script constants
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
 " ---- helpers
 
diff --git a/autoload/wheel/void.vim b/autoload/wheel/void.vim
index fdc7409a..a7763c4c 100644
--- a/autoload/wheel/void.vim
+++ b/autoload/wheel/void.vim
@@ -8,10 +8,11 @@
 
 " ---- script constants
 
-if ! exists('s:mandala_autocmds_group')
-	let s:mandala_autocmds_group = wheel#crystal#fetch('mandala/autocmds/group')
-	lockvar s:mandala_autocmds_group
+if exists('s:mandala_autocmds_group')
+	unlockvar s:mandala_autocmds_group
 endif
+let s:mandala_autocmds_group = wheel#crystal#fetch('mandala/autocmds/group')
+lockvar s:mandala_autocmds_group
 
 " ---- no-op function
 
diff --git a/autoload/wheel/vortex.vim b/autoload/wheel/vortex.vim
index 3a9eceb0..0ec7cee4 100644
--- a/autoload/wheel/vortex.vim
+++ b/autoload/wheel/vortex.vim
@@ -6,15 +6,17 @@
 
 " ---- script constants
 
-if ! exists('s:referen_coordin')
-	let s:referen_coordin = ['torus', 'circle', 'location']
-	lockvar s:referen_coordin
+if exists('s:referen_coordin')
+	unlockvar s:referen_coordin
 endif
+let s:referen_coordin = ['torus', 'circle', 'location']
+lockvar s:referen_coordin
 
-if ! exists('s:level_separ')
-	let s:level_separ = wheel#crystal#fetch('separator/level')
-	lockvar s:level_separ
+if exists('s:level_separ')
+	unlockvar s:level_separ
 endif
+let s:level_separ = wheel#crystal#fetch('separator/level')
+lockvar s:level_separ
 
 " ---- sync up & down
 
diff --git a/autoload/wheel/waterclock.vim b/autoload/wheel/waterclock.vim
index 7997e06a..4cc828cc 100644
--- a/autoload/wheel/waterclock.vim
+++ b/autoload/wheel/waterclock.vim
@@ -13,15 +13,17 @@
 
 " ---- script constants
 
-if ! exists('s:level_separ')
-	let s:level_separ = wheel#crystal#fetch('separator/level')
-	lockvar s:level_separ
+if exists('s:level_separ')
+	unlockvar s:level_separ
 endif
+let s:level_separ = wheel#crystal#fetch('separator/level')
+lockvar s:level_separ
 
-if ! exists('s:field_separ')
-	let s:field_separ = wheel#crystal#fetch('separator/field')
-	lockvar s:field_separ
+if exists('s:field_separ')
+	unlockvar s:field_separ
 endif
+let s:field_separ = wheel#crystal#fetch('separator/field')
+lockvar s:field_separ
 
 " ---- newer & older
 
